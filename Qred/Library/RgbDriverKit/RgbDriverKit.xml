<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RgbDriverKit</name>
    </assembly>
    <members>
        <member name="T:RgbDriverKit.CalibratedSpectrometer">
            <summary>A spectrometer that supports pre-processing of the spectra.</summary>
            <remarks>
            <para>"Pre-processing" means correcting a spectrum after reading tit from the device and before handing them over to the calling program.
            These processing steps are applied in order to provide a more precise and meaningful spectrum. They are not application-specific.</para>
            <para>The different processing steps are listed in the <see cref="T:RgbDriverKit.SpectrometerProcessing"/> enumeration.</para>
            <para>Note to implementors: In your <see cref="M:RgbDriverKit.Device.Open"/> implementation, the three variables selectableProcessingSteps, selectedProcessingSteps
            and defaultProcessingSteps must be initialized.</para>
            </remarks>
        </member>
        <member name="T:RgbDriverKit.Spectrometer">
            <summary>Base class for spectrometers.</summary>
        </member>
        <member name="T:RgbDriverKit.Device">
            <summary>The base class for all device drivers.</summary>
            <remarks>In descendant classes a constructor must also be supplied, taking as parameters whatever is needed to unambiguously
            identify a single device (like a serial port name).</remarks>
        </member>
        <member name="M:RgbDriverKit.Device.Open">
            <summary>Opens the connection to the device.</summary>
            <remarks>If unsuccessful, throws an exception.</remarks>
        </member>
        <member name="M:RgbDriverKit.Device.Close">
            <summary>Closes the connection to the device.</summary>
            <remarks>This is the opposite of <see cref="M:RgbDriverKit.Device.Open"/>. If the device connection is not open, this method does nothing.
            This method does not throw any exceptions.</remarks>
        </member>
        <member name="M:RgbDriverKit.Device.SearchDevices">
            <summary>Searches for devices of this kind.</summary>
            <returns>An array of device objects, one for each device that was found.</returns>
            <remarks>
            <para>The returned device objects should have the serial number, model name and port string set properly, if possible.</para>
            <para>The concept is that you call this method at program start and then let the user choose one of the returned device objects
            (if several devices are connected). Afterwards, you can start using the selected device by calling the <see cref="M:RgbDriverKit.Device.Open"/> method.</para>
            <para>Descendant classes may overload this method with methods that accept further parameters describing 
            how the device search should be performed. For example, they may take a boolean parameter <c>AutoScan</c> that determines if
            the available interface should be actively searched for devices.</para>
            </remarks>
        </member>
        <member name="M:RgbDriverKit.Device.CheckDeviceRemoved">
            <summary>Checks whether the device was removed.</summary>
            <returns><c>true</c> if the device was just removed. <c>false</c> if the device is either still connected or was not open anyway.</returns>
            <remarks>This function should be called when a WM_DEVICECHANGE message was received in order to check if it was this device that changed.
            If this device was actually removed, this method also does all neccessary clean-up including closing the device connection.
            It sets <see cref="P:RgbDriverKit.Device.IsOpen"/> to <c>false</c> if device is removed.</remarks>
        </member>
        <member name="M:RgbDriverKit.Device.IsSameDeviceAs(RgbDriverKit.Device)">
            <summary>Determines whether the specified <see cref="T:RgbDriverKit.Device"/> refers to the same physical device as this instance.</summary>
            <param name="OtherDevice">The <see cref="T:RgbDriverKit.Device"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:RgbDriverKit.Device"/> refers to the same physical device; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="OtherDevice"/> parameter is null.</exception>
            <remarks>Note to implementors: The base class implementation just compares the <see cref="P:RgbDriverKit.Device.DetailedDeviceName"/> of both devices.
            Override this method to provide a more suitable comparison using the devices actual properties like its serial number.</remarks>
        </member>
        <member name="P:RgbDriverKit.Device.IsOpen">
            <summary>Indicates whether the connection to the device is open.</summary>
        </member>
        <member name="P:RgbDriverKit.Device.Manufacturer">
            <summary>Gets the device manufacturer.</summary>
        </member>
        <member name="P:RgbDriverKit.Device.ModelName">
            <summary>Gets the device model name.</summary>
            <remarks>The model name for a simulated device (that is of no real use) should start with "Simulat" (with a capital S).</remarks>
        </member>
        <member name="P:RgbDriverKit.Device.SerialNo">
            <summary>Gets the serial number.</summary>
            <remarks>May be empty, if serial number cannot be read from the device.</remarks>
        </member>
        <member name="P:RgbDriverKit.Device.PortName">
            <summary>Gets the port name.</summary>
            <remarks>May be empty, if not applicable.</remarks>
        </member>
        <member name="P:RgbDriverKit.Device.DetailedDeviceName">
            <summary>Gets a detailed device name.</summary>
            <remarks>Note to implementors: This string should be unique and correct after initialization and after device object is returned from SearchDevices.</remarks>
        </member>
        <member name="M:RgbDriverKit.Spectrometer.StartExposure">
            <summary>Starts the exposure.</summary>
            <remarks>This method also discards any spectrum that is available but hasn't been read out yet.</remarks>
        </member>
        <member name="M:RgbDriverKit.Spectrometer.CancelExposure">
            <summary>Cancels the exposure.</summary>
            <remarks>This method also discards any spectrum that is available but hasn't been read out yet.</remarks>
        </member>
        <member name="M:RgbDriverKit.Spectrometer.GetSpectrum">
            <summary>Gets the spectrum as a float array.</summary>
            <returns>The spectrum as an array of floats.</returns>
            <remarks><para>The spectrum contains <see cref="P:RgbDriverKit.Spectrometer.PixelCount"/> values.</para>
            <para>If this method is called after an error, a suitable exception is thrown.</para></remarks>
        </member>
        <member name="M:RgbDriverKit.Spectrometer.GetData">
            <summary>Gets the spectrum data (deprecated).</summary>
            <remarks>This method was renamed to <see cref="M:RgbDriverKit.Spectrometer.GetSpectrum"/>. Do not use GetData() anymore.</remarks>
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Spectrometer.GetWavelengths">
            <summary>Gets the wavelength calibration.</summary>
            <returns>A double array of size <see cref="P:RgbDriverKit.Spectrometer.PixelCount"/> containing the wavelengths in nm for each pixel number.</returns>
            <exception cref="T:System.InvalidOperationException">Not enough wavelength coefficients available.</exception>
            <remarks><para>the pixel numbers correspond to the indices of the spectrum returned by <see cref="M:RgbDriverKit.Spectrometer.GetSpectrum"/>.</para>
            <para>Note to implementers: this method may be overriden if a custom calculation is needed or if the
            wavelength are provided as a table.</para></remarks>
        </member>
        <member name="M:RgbDriverKit.Spectrometer.SetIOPinConfiguration(System.Int32,RgbDriverKit.SpectrometerIOConfiguration)">
            <summary>Configures an I/O pin.</summary>
            <param name="pin">The pin number (starting at 0).</param>
            <param name="config">The <see cref="T:RgbDriverKit.SpectrometerIOConfiguration"/> for this pin.</param>
            <returns>Returns <c>true</c> if this mode is supported; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The pin number is too large or too small.</exception>
        </member>
        <member name="M:RgbDriverKit.Spectrometer.GetIOPinConfiguration(System.Int32)">
            <summary>Gets the configuration for an I/O pin.</summary>
            <param name="pin">The pin.</param>
            <returns>The <see cref="T:RgbDriverKit.SpectrometerIOConfiguration"/> for this pin.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The pin number is too large or too small.</exception>
        </member>
        <member name="M:RgbDriverKit.Spectrometer.SetIOPin(System.Int32,System.Boolean)">
            <summary>Sets the IO pin output state.</summary>
            <param name="pin">The pin number (starting at 0).</param>
            <param name="state">The new output state.</param>
            <remarks>This does the same as <see cref="M:RgbDriverKit.Spectrometer.SetIOPinConfiguration(System.Int32,RgbDriverKit.SpectrometerIOConfiguration)"/>, setting the pin as constant output according to state.</remarks>
        </member>
        <member name="M:RgbDriverKit.Spectrometer.GetIOPin(System.Int32)">
            <summary>Gets an IO pin input state.</summary>
            <param name="Pin">The pin number (starting at 0).</param>
            <returns><c>true</c> if the pin is logical high, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:RgbDriverKit.Spectrometer.TriggerOptionAvailable(RgbDriverKit.SpectrometerTriggerOptions)">
            <summary>Gets whether a certain <see cref="T:RgbDriverKit.SpectrometerTriggerOptions"/> is available.</summary>
            <param name="mode">One of the values of the <see cref="T:RgbDriverKit.SpectrometerTriggerOptions"/> enumeration.</param>
            <returns><c>true</c> if the trigger option is available; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.ExposureTime">
            <summary>Gets or sets the exposure time in seconds.</summary>
            <value>The exposure time in seconds.</value>
            <remarks>Exposure time is also known as "integration time".</remarks>
        </member>
        <member name="E:RgbDriverKit.Spectrometer.ExposureTimeChanged">
            <summary>Occurs when the <see cref="P:RgbDriverKit.Spectrometer.ExposureTime"/> value has changed.</summary>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.Averaging">
            <summary>Gets or sets the averaging.</summary>
            <value>The number of spectra to be averaged over. 1 = no averaging.</value>
            <remarks><para>In order to decrease the noise level, you can average over several spectra taken one after another.</para>
            <para>This kind of averaging is also called "temporal averaging", because it averages over several spectra taken at different
            points in time. It is different from smoothing, which is a kind of "spectral averaging", because it averages over several wavelengths.
            Smoothing is also known as "boxcar averaging".</para></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The new value is too large or not positive.</exception>
        </member>
        <member name="E:RgbDriverKit.Spectrometer.AveragingChanged">
            <summary>Occurs when the <see cref="P:RgbDriverKit.Spectrometer.Averaging"/> value has changed.</summary>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.Status">
            <summary>Gets the spectrometer status.</summary>
            <value>One of the values of the <see cref="T:RgbDriverKit.SpectrometerStatus"/> enumeration.</value>
            <remarks>This does not throw any exceptions. If an error occurred, the value  <see cref="F:RgbDriverKit.SpectrometerStatus.Error"/> is returned.
            In order to find out which error occurred, you need to call the  <see cref="M:RgbDriverKit.Spectrometer.GetSpectrum"/> method after an error,
            which will throw a suitable exception.</remarks>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.AvailableSpectra">
            <summary>Gets the number of spectra that are available, but have not been read out yet.</summary>
            <value>The number of available spectra.</value>
            <remarks>This value is reset to zero when <see cref="M:RgbDriverKit.Spectrometer.StartExposure"/> or <see cref="M:RgbDriverKit.Spectrometer.CancelExposure"/> is called.
            When this value is larger than 0, you read the next spectrum with <see cref="M:RgbDriverKit.Spectrometer.GetSpectrum"/>.</remarks>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.PixelCount">
            <summary>Gets the number of pixels in a spectrum.</summary>
            <remarks>This is the number of values returned by <see cref="M:RgbDriverKit.Spectrometer.GetSpectrum"/>. It might differ from the internal number of data values received from the device.
            It may change when exposure or processing settings are changed (especially when a monochromator is used).</remarks>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.MinExposureTime">
            <summary>Gets the minimum exposure time.</summary>
            <value>The minimum exposure time in seconds.</value>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.MaxExposureTime">
            <summary>Gets the maximum exposure time.</summary>
            /// <value>The maximum exposure time in seconds.</value>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.MaxAveraging">
            <summary>Gets the maximum averaging.</summary>
            /// <value>The maximum value for <see cref="P:RgbDriverKit.Spectrometer.Averaging"/>.</value>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.WavelengthCoefficients">
            <summary>Gets or sets the wavelength coefficients.</summary>
            <value>A double array containing the wavelength coefficients.</value>
            <remarks>As long as the <see cref="M:RgbDriverKit.Spectrometer.GetWavelengths"/>  method is not changed, this
            should be an array with 4 elements containing the constant [0], linear [1], quadratic [2] and cubic [3] term
            of the 3rd order polynomial used for calculating the wavelengths. Wavelengths are in nm.</remarks>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.TimeStamp">
            <summary>Gets the time stamp for the most recent spectrum.</summary>
            <value>The date and time of the start of the exposure according to the system clock.</value>
            <remarks>This value is valid after calling <see cref="M:RgbDriverKit.Spectrometer.GetSpectrum"/> (or the equivalent but deprecated method GetData()). 
            When averaging is used, the start time of the first spectrum is returned.</remarks>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.LoadLevel">
            <summary>Gets the sensor load level for the most recent spectrum.</summary>
            <value>0 = no signal, 1.0 = maximum level for good signal, &gt;= 1.0 = overload</value>
            <remarks>This value is valid after calling <see cref="M:RgbDriverKit.Spectrometer.GetSpectrum"/> (or the equivalent but deprecated method GetData()). 
            When averaging is used, the maximum value and not the average of the individual exposures is returned.</remarks>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.NumIOPins">
            <summary>Gets the number of IO pins.</summary>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.IOPins">
            <summary>Gets the IO pin states.</summary>
            <value>Returns a bitwise combination of the logic states of the I/O pins. Bit x corresponds to pin x.</value>
            <exception cref="T:System.NotSupportedException">No I/O pins available on this device.</exception>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.ExternalTriggerSource">
            <summary>Gets or sets the I/O pin to be used as the external trigger source.</summary>
            <value>The trigger pin.</value>
            <exception cref="T:System.NotSupportedException">This device does not support external triggering.</exception>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.ExternalTriggerRisingEdge">
            <summary>Gets or sets a value indicating whether to trigger on the rising or falling edge of the external trigger source.</summary>
            <value> <c>true</c> for triggering on the rising edge, <c>false</c> for falling edge.</value>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.TriggerOption">
            <summary>Gets or sets the trigger option.</summary>
            <value>One of the values of the <see cref="T:RgbDriverKit.SpectrometerTriggerOptions"/> enumeration.</value>
            <exception cref="T:System.NotSupportedException">This device does not support different trigger options.</exception>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.UseExternalTrigger">
            <summary>Gets or sets a value indicating whether to use the external trigger when taking spectra.</summary>
            <value> <c>true</c> if the external trigger should be used; otherwise, <c>false</c>.</value>
            <exception cref="T:System.NotSupportedException">This device does not support external triggering.</exception>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.CanUseExternalTrigger">
            <summary>Gets a value indicating whether this device can use an external trigger source.</summary>
            <value><c>true</c> if this instance can use an external trigger; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.CanReadTemperature">
            <summary>Gets a value indicating whether this device can measure its internal <see cref="P:RgbDriverKit.Spectrometer.Temperature"/>.</summary>
            <value><c>true</c> if the temperature can be measured; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RgbDriverKit.Spectrometer.Temperature">
            <summary>Gets the internal device temperature.</summary>
            <value>The internal device temperature in °C.</value>
            <remarks>If the image sensor inside the device has its own temperature sensor, than this property returns the temperature of the image sensor. If the image sensor is temperature-controlled, this temperature
            may differ significantly from the temperature of the other device components.</remarks>
            <exception cref="T:System.NotSupportedException">This device does not have a temperature sensor.</exception>
        </member>
        <member name="F:RgbDriverKit.CalibratedSpectrometer.CalibrationData">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.SerializeCalibrationData">
            <summary>Gets the calibration as binary data.</summary>
            <returns>A byte array containing all calibration data encoded as binary.</returns>
            <exception cref="T:System.Exception">Internal error.</exception>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.DeserializeCalibrationData(System.Byte[])">
            <summary>Sets the calibration from binary data.</summary>
            <param name="bytedata">A byte array containing the calibration data encoded as binary.</param>
            <returns>The number of bytes from the array that were actually used. Zero if failed to read calibration data.</returns>
            <remarks><para>This method does not throw any exceptions, because any error that may occur here should not interrupt device initialization. Instead, if an error
            occurrs, the default calibration is loaded. In order to check if everything went fine, please check the <see cref="P:RgbDriverKit.CalibratedSpectrometer.DefaultCalibrationUsed"/> property.</para>
            <para>This method does not throw exceptions.</para></remarks>
            <exception cref="T:System.ArgumentException">Invalid calibration data format version.</exception>
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.GetDeviceSettings">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.#ctor">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.CalibratedSpectrometer"/> class.</summary>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.GetSpectrum">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">There was a communication error. This could be due to device removal.</exception>
            <exception cref="T:System.ArgumentException">A calibration value was found to be incorrect.</exception>
            <exception cref="T:System.InvalidOperationException">An error ocurred during spectrum processing.</exception>
            <exception cref="T:System.InvalidOperationException">No data to read.</exception>
            <remarks><para>The spectrum contains <see cref="P:RgbDriverKit.Spectrometer.PixelCount"/> values.
            If <see cref="F:RgbDriverKit.SpectrometerProcessing.NormalizeExposureTime"/> is enabled (default case),
            the spectrum is normalized to an exposure time of 1 second.</para>
            <para>If this method is called after the <see cref="P:RgbDriverKit.Spectrometer.Status"/> property reports an <see cref="F:RgbDriverKit.SpectrometerStatus.Error"/>,
            a suitable exception is thrown.</para>
            <para>Note to implementors: The method is sealed here. If you need to override it in a descendent class, please override <see cref="M:RgbDriverKit.CalibratedSpectrometer.GetSpectrumData"/> instead.</para></remarks>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.GetSpectrumData">
            <summary>Gets the spectrum including some metadata.</summary>
            <returns>An instance of the <see cref="T:RgbDriverKit.SpectrumData"/> class that contains the data.</returns>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">There was a communication error. This could be due to device removal.</exception>
            <exception cref="T:System.ArgumentException">A calibration value was found to be incorrect.</exception>
            <exception cref="T:System.InvalidOperationException">An error ocurred during spectrum processing.</exception>
            <exception cref="T:System.InvalidOperationException">No data to read.</exception>
            <remarks><para>The spectrum contains <see cref="P:RgbDriverKit.Spectrometer.PixelCount"/> values.
            If <see cref="F:RgbDriverKit.SpectrometerProcessing.NormalizeExposureTime"/> is enabled (default case),
            the spectrum is normalized to an exposure time of 1 second.</para>
            <para>If this method is called after the <see cref="P:RgbDriverKit.Spectrometer.Status"/> property reports an <see cref="F:RgbDriverKit.SpectrometerStatus.Error"/>,
            a suitable exception is thrown.</para>
            <para>See <see cref="T:RgbDriverKit.SpectrumData"/> for more information on the returned data.</para></remarks>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.FinishAveraging(RgbDriverKit.SpectrumData)">
            <summary>Divides the spectrum data by the Averaging value, mirrors the spectrum if selected and estimates the readout noise, if not yet known.</summary>
            <param name="spdata">An instance of <see cref="T:RgbDriverKit.SpectrumData"/> that contains the spectrum and the averaging value.</param>
            <remarks>This method assumes that the LoadLevel value does NOT contain the load level, but the maximum value of any individual spectrum.</remarks>
        </member>
        <member name="F:RgbDriverKit.CalibratedSpectrometer.darkSpecType">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.DarkSetValues(System.Single[],System.Single[],System.Single[0:,0:])">
            <summary>Set and initialize the dark spectra.</summary>
            <param name="darkSpecTimes">An array of float containing the exposure times for each dark spectrum. The series of exposure times must be strictly increasing. May be <c>null</c>.</param>
            <param name="darkPixelAvg">An array of float containing the mean value of the dark pixels for each dark spectrum. May be <c>null</c> if the spectrometer does not have dark pixels.</param>
            <param name="darkSpec">A two-dimensional array of float containing the dark spectra. May be <c>null</c>.
            The first index is the dark spectrum number (corresponds to darkSpecTimes index) and the second parameter is the pixel number.</param>
            <exception cref="T:System.ArgumentException">Number of dark spectra does not match.</exception>
            <exception cref="T:System.ArgumentException">Dark spectrum number of pixels does not match.</exception>
            <exception cref="T:System.ArgumentException">Series of exposure times is not strictly increasing.</exception>
            <remarks><para>In the default case of <see cref="P:RgbDriverKit.CalibratedSpectrometer.RawData"/> = <c>false</c>, the dark spectra are automatically subtracted from the measured spectrum,
            so in most cases you do not need to use this method. It may be used for recalibrating the dark spectra, but we recommend to use the Waves application software
            for this purpose.</para>
            <para>Setting this property does not set the <see cref="P:RgbDriverKit.CalibratedSpectrometer.CalibrationTemperatureDarkSpectra"/> to the current device <see cref="P:RgbDriverKit.Spectrometer.Temperature"/> anymore.
            When you set new dark spectra, you'll probably also want to update this value to the current temperature (if <see cref="P:RgbDriverKit.Spectrometer.CanReadTemperature"/>).</para>
            <para>In order to save any changes to this property persistently to the device memory, use <see cref="M:RgbDriverKit.CalibratedSpectrometer.SaveUserCalibration"/>. To undo changes,
            use <see cref="M:RgbDriverKit.CalibratedSpectrometer.LoadUserCalibration"/>.</para></remarks>
            
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.DarkSetValues(System.Single[],System.Single[],System.Single[0:,0:],System.Int32)">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.DarkSpectrum(System.Single)">
            <summary>Gets the dark spectrum for a specific exposure time.</summary>
            <param name="expTime">The exposure time in seconds.</param>
            <returns>A float array containing the dark spectrum.</returns>
            <exception cref="T:System.ArgumentException">Invalid exposure time for dark spectrum.</exception>
            <remarks>
            <para>In the default case of <see cref="P:RgbDriverKit.CalibratedSpectrometer.RawData"/> = <c>false</c>, the dark spectra are automatically subtracted from the measured spectrum,
            so in most cases you do not need to use this method.</para>
            </remarks>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.DoCorrectDark(RgbDriverKit.SpectrumData)">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.CreateCalibrationForBinning(System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.DoAdditionalFiltering(RgbDriverKit.SpectrumData)">
            <summary>Applies additional device-specific filtering.</summary>
            <param name="spdata">The spectrum data.</param>
            <remarks>This default implementation applies a 3rd order Savitzky-Golay filter across 5 pixels.</remarks>
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.LoadUserData">
            <summary>Loads user data from the the device.</summary>
            <returns>A byte array containing the user data (or <c>null</c> if not supported).</returns>
            <remarks>
            <para>If supported by the spectrometer, you can use the User Data memory to store your own data on the device.</para>
            </remarks>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.SaveUserData(System.Byte[])">
            <summary>Saves user data to the device.</summary>
            <param name="data">The user data to be stored in the device.</param>
            <exception cref="T:System.InvalidOperationException">This spectrometer cannot store user data.</exception>
            <exception cref="T:RgbDriverKit.DeviceMemoryFullException">There is not enough space in the device to store the user data.</exception>
            <remarks>
            <para>If supported by the spectrometer, you can use the User Data memory to store your own data on the device.</para>
            </remarks>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.SaveUserCalibration">
            <summary>Saves the user calibration.</summary>
            <exception cref="T:System.InvalidOperationException">The spectrometer is not idle.</exception>
            <remarks>This implementation saves the calibration data to the hard disk. 
            Override this method in order to save calibration data to the device.</remarks>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.SaveUserCalibrationToFile(System.String)">
            <summary>Saves the user calibration to a file.</summary>
            <exception cref="T:System.InvalidOperationException">The spectrometer is not idle.</exception>
            <param name="Filename">The filename.</param>
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.LoadUserCalibration">
            <summary>Loads the user calibration.</summary>
            <exception cref="T:System.InvalidOperationException">The spectrometer is not idle.</exception>
            <exception cref="T:System.ArgumentException">Invalid calibration data format version.</exception>
            <remarks><para>This implementation loads the calibration data from the hard disk.
            Override this method in order to load calibration data from the device.</para>
            <para>This method does not throw any exceptions, because any error that may occur here should not interrupt device initialization.
            If an error occurrs, the default calibration is loaded. In order to check if everything went fine, you can check the 
            <see cref="P:RgbDriverKit.CalibratedSpectrometer.CalibrationLoadError"/> property.</para></remarks>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.LoadUserCalibrationFromFile(System.String)">
            <summary>Loads the user calibration from a file.</summary>
            <param name="Filename">The filename.</param>
            <exception cref="T:System.InvalidOperationException">The spectrometer is not idle.</exception>
            <exception cref="T:System.ArgumentException">Invalid calibration data format version.</exception>
            <remarks>This method does not throw any exceptions.
            If an error occurrs, the default calibration is loaded. In order to check if everything went fine, you can check the 
            <see cref="P:RgbDriverKit.CalibratedSpectrometer.CalibrationLoadError"/> property.</remarks>
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.RestoreFactoryCalibration">
            <summary>Restores the factory calibration.</summary>
            <remarks>Not all spectrometers may support all calibration features.</remarks>
            <exception cref="T:System.InvalidOperationException">No factory calibration is available.</exception>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.CheckTemperature">
            <summary>Checks if the stored calibrations are still valid at the current  <see cref="P:RgbDriverKit.Spectrometer.Temperature"/>.</summary>
            <returns><c>false</c> if at least one of the calibrations need to be recalibrated; otherwise <c>true</c>.</returns>
            <exception cref="T:System.NotSupportedException">This device does not have a temperature sensor.</exception>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.CheckTemperature(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>Checks if the stored calibrations are still valid at the current  <see cref="P:RgbDriverKit.Spectrometer.Temperature"/>.</summary>
            <param name="wavelengths"><c>false</c> if the wavelengths need to be recalibrated; otherwise <c>true</c>.</param>
            <param name="nonlinearity"><c>false</c> if the nonlinearity needs to be recalibrated; otherwise <c>true</c>.</param>
            <param name="darkSpectra"><c>false</c> if the dark spectra need to be recalibrated; otherwise <c>true</c>..</param>
            <param name="sensitivity"><c>false</c> if the spectral sensitivity and power need to be recalibrated; otherwise <c>true</c>.</param>
            <returns><c>false</c> if at least one of the calibrations need to be recalibrated; otherwise <c>true</c>.</returns>
            <exception cref="T:System.NotSupportedException">This device does not have a temperature sensor.</exception>
        </member>
        <member name="M:RgbDriverKit.CalibratedSpectrometer.AutoExposure">
            <summary>Performs one auto-exposure step based on the most recently acquired spectrum.</summary>
            <returns>The result of the auto-exposure algorithm.</returns>
            <remarks>This method should be called after the spectrum is read by <see cref="M:RgbDriverKit.Spectrometer.GetSpectrum"/>. It may also be called before that, but then you
            need to note that when calling <see cref="M:RgbDriverKit.Spectrometer.GetSpectrum"/>, the exposure time may have already been updated and may not reflect the exposure time
            at which the spectrum was taken.</remarks>
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.DefaultCalibrationUsed">
            <summary>Gets a value indicating whether the default calibration is currently used.</summary>
            <value><c>true</c> ifthe default calibration is currently used; otherwise, <c>false</c>.</value>
            <remarks><para>The default calibration is only used if the device calibration settings were not read successfully during device initialization.
            This property is only intended to be used after loading a calibration. It may not be updated if the calibration is changed later on.</para>
            <para>This property is deprecated. Instead, please check if <see cref="P:RgbDriverKit.CalibratedSpectrometer.CalibrationLoadError"/> is not an empty string.</para></remarks>
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.ModelID">
            <summary>Gets the model ID.</summary>
            <returns>The model ID (or an empty string, if not available).</returns>
            <remarks><para>For devices made by RGB Photonics, this value starts with "ID" and is followed by a 4-digit number.
            For other devices this may be any kind of string.</para>
            <para>This value is intended to enable identification of a certain model. For example, this value may is used to get a picture of the device
            or determine if a specific firmware is suitable for the device. Therefore, all devices that look different or require a different firmware
            should have a different model ID.</para></remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.HardwareVersion">
            <summary>Gets the device hardware version.</summary>
            <returns>The hardware version number (or an empty string, if not available).</returns>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.SoftwareVersion">
            <summary>Gets the device firmware version.</summary>
            <returns>The device firmware version number (or an empty string, if not available).</returns>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.TimeStamp">
            <inheritdoc/>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.LoadLevel">
            <inheritdoc/>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.SensorGain">
            <summary>Gets or sets the sensor gain.</summary>
            <value>The sensor gain.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid sensor gain.</exception>
            <remarks>This property applies to spectrometers with a selectable sensor gain. The gain can be set to a value between 0 and <see cref="P:RgbDriverKit.CalibratedSpectrometer.MaxSensorGain"/>.</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.MaxSensorGain">
            <summary>Gets the maximum value for the <see cref="P:RgbDriverKit.CalibratedSpectrometer.SensorGain"/> property.</summary>
            <value>The maximum <see cref="P:RgbDriverKit.CalibratedSpectrometer.SensorGain"/>.</value>
            <remarks>A maximum value of 0 means that the sensor gain cannot be changed.</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.AvailableProcessingSteps">
            <summary>Gets the processing steps that are available for this spectrometer.</summary>
            <value>The available processing steps.</value>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.ProcessingSteps">
            <summary>Gets or sets the processing steps that are currently used when taking a spectrum.</summary>
            <value>The processing steps.</value>
            <remarks>Processing steps not included in <see cref="P:RgbDriverKit.CalibratedSpectrometer.AvailableProcessingSteps"/> are always excluded when setting this value.</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.DefaultProcessingSteps">
            <summary>Gets the default processing steps.</summary>
            <value>The default processing steps.</value>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.RawData">
            <summary>Gets or sets a value indicating whether the raw data from the image sensor should be returned.</summary>
            <value><c>true</c> if raw data should be returned; otherwise, <c>false</c>.</value>
            <remarks><para>If this value is <c>true</c>, the <see cref="P:RgbDriverKit.CalibratedSpectrometer.ProcessingSteps"/> are <c>0</c>. If it is set to <c>true</c> and then
            to <c>false</c> again, the previous <see cref="P:RgbDriverKit.CalibratedSpectrometer.ProcessingSteps"/> are restored.</para>
            <para>This property is deprecated and may be removed in a future version. Please use <see cref="P:RgbDriverKit.CalibratedSpectrometer.ProcessingSteps"/> instead.</para>
            </remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.OffsetSpectrum">
            <exclude/>
            <summary>Gets or sets the offset spectrum.</summary>
            <value>A float array containing the spectrum offset for each pixel.</value>
            <remarks>This array may be <c>null&gt;</c> if no offset spectrum is available.
            If you set this property, you should also set the offset calibration temperature accordingly.
            In order to save any changes to this property persistently to the device memory, use <see cref="M:RgbDriverKit.CalibratedSpectrometer.SaveUserCalibration"/>. To undo changes,
            use <see cref="M:RgbDriverKit.CalibratedSpectrometer.LoadUserCalibration"/>.</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.NonlinearityCoefficients">
            <summary>Gets or sets the nonlinearity coefficients.</summary>
            <value>A float array containing the nonlinearity coefficients. In the default case of a cubic polynomial, this
            should be an array with 4 elements containing the constant [0], linear [1], quadratic [2] and cubic [3] term
            of the cubic polynomial used for correcting the nonlinearity.</value>
            <remarks>Setting this property also sets the <see cref="P:RgbDriverKit.CalibratedSpectrometer.CalibrationTemperatureNonlinearity"/> to the current device <see cref="P:RgbDriverKit.Spectrometer.Temperature"/>.
            In order to save any changes to this property persistently to the device memory, use <see cref="M:RgbDriverKit.CalibratedSpectrometer.SaveUserCalibration"/>. To undo changes,
            use <see cref="M:RgbDriverKit.CalibratedSpectrometer.LoadUserCalibration"/>.</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.AlternatingNonlinearity">
            <summary>Gets or sets a value indicating whether to use two alternating nonlinearity functions for even and odd pixel numbers.</summary>
            <value> <c>true</c> to use two nonlinearity functions, <c>false</c> for a single function.</value>
            <remarks>Some image sensors have different nonlinearity characteristics for even and odd pixels. In order to correct the nonlinearity more precisely,
            an alternating nonlinearity function can be used. In this case the current implementation is limited to two 3rd order polynomials. The <see cref="P:RgbDriverKit.CalibratedSpectrometer.NonlinearityCoefficients"/>
            array should then contain 8 values: the first 4 are the coefficients for even pixel numbers, the second 4 for odd pixel numbers (after stripping offset and dark pixels).</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.DarkSpecTimes">
            <summary>Exposure times for all dark spectra.</summary>
            <returns>An array of float containing the exposure times for all dark spectra.</returns>
            <remarks>In the default case of <see cref="P:RgbDriverKit.CalibratedSpectrometer.RawData"/> = <c>false</c>, the dark spectra are automatically subtracted from the measured spectrum,
            so in most cases you do not need to use this property. It may be used for recalibrating the dark spectra, but we recommend to use the Waves application software
            for this purpose.</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.DarkSpecDefaultTimes">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.WaitAfterExposureChange">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.UseSensitivityCalibration">
            <summary>Gets or sets a value indicating whether to mupltiply the spectrum with the sensitivity calibration during readout.</summary>
            <value><c>true</c> if the sensitivity calibration shall be used during readout; otherwise, <c>false</c>.</value>
            <exception cref="T:System.InvalidOperationException">No sensitivity calibration is available.</exception>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.CanUseSensitivityCalibration">
            <summary>Gets a value indicating whether this instance can use sensitivity calibration.</summary>
            <value><c>true</c> if this instance can use sensitivity calibration; otherwise, <c>false</c>.</value>
            <remarks>A vale of <c>false</c> indicates that either this driver does not support sensitivity calibration at all
            or that the sensitivity has just not been calibrated yet.</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.SensitivityCalibration">
            <summary>Gets or sets the sensitivity calibration.</summary>
            <value>A float array containing the sensitivity calibration.</value>
            <remarks>This array may be <c>null&gt;</c> if not sensitivity calibration is available.
            Setting this property also sets the <see cref="P:RgbDriverKit.CalibratedSpectrometer.CalibrationTemperatureSensitivity"/> to the current device <see cref="P:RgbDriverKit.Spectrometer.Temperature"/>.
            In order to save any changes to this property persistently to the device memory, use <see cref="M:RgbDriverKit.CalibratedSpectrometer.SaveUserCalibration"/>. To undo changes,
            use <see cref="M:RgbDriverKit.CalibratedSpectrometer.LoadUserCalibration"/>.</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.SensitivityUnit">
            <summary>Gets or sets the unit of the sensitivity calibration.</summary>
            <value>The sensitivity unit.</value>
            <remarks>When a spectrum is taken with sensitivity correction turned on, this is the unit of the y axis of the spectrum.</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.SensitivityDescription">
            <summary>Gets or sets a description of the sensitivity calibration.</summary>
            <value>The sensitivity description.</value>
            <remarks><para>This string can be used to describe the circumstances of the sensitivity calibration, for example which measurement probe and optical fiber were used.</para>
            <para>Important note: When stored in the device (by calling <see cref="M:RgbDriverKit.CalibratedSpectrometer.SaveUserCalibration"/>), this string is converted to UTF-8 and then stored in a 64 byte buffer. If the resulting UTF-8 string is larger
            than 64 bytes, an exception will be thrown when trying to save the calibration data to the device. Please make sure that the string fits into 64 bytes as UTF-8 before
            saving it to the device. You could, for example, use System.Text.Encoding.UTF8.GetByteCount().</para></remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.EntranceSlitWidth">
            <summary>Gets or sets the width of the entrance slit.</summary>
            <value>The width of the entrance slit in microns.</value>
            <remarks>The spectral sensitvitiy calibration depends strongly on the width of the entrance slit. Therefore the entrance slit width is stored together with the calibration.
            A value of 0 means the entrance slit width is unknown.</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.PrnuCorrection">
            <summary>Gets the correction spectrum for PRNU correction.</summary>
            <value>The PRNU correction spectrum.</value>
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.CalibrationLoadError">
            <summary>Gets a string that indicates if a error occurred while loading the calibration data.</summary>
            <value>The error message if an error occurred while loading the calibration data, otherwise an empty string.</value>
            <remarks>If an error occurrs while loading the calibration data, the default calibration is loaded and no exception thrown.
            You can read this property after loading a calibration or calling the <see cref="M:RgbDriverKit.Device.Open"/> method in order to check if the
            calibration was loaded successfully.</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.CalibrationDataPath">
            <summary>Path for storing local calibration data.</summary>
            <remarks>Used for devices that do not have a nonvolatile memory for storing calibration data.</remarks>
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.CanRestoreFactoryCalibration">
            <summary>Gets a value indicating whether this device contains a factory calibration that can be restored.</summary>
            <value><c>true</c> if this device can restore a factory calibration; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.CalibrationTemperatureWavelengths">
            <summary>Gets or sets the device temperature at which the wavelengths were calibrated.</summary>
            <value>The temperature in °C.</value>
            <remarks>The calibration stored in the device is only valid for a certain temperature range.
            The <see cref="M:RgbDriverKit.CalibratedSpectrometer.CheckTemperature"/> method compares these values to the actual <see cref="P:RgbDriverKit.Spectrometer.Temperature"/> to determine if the device needs to be recalibrated.</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.CalibrationTemperatureNonlinearity">
            <summary>Gets or sets the device temperature at which the nonlinearity was calibrated.</summary>
            <value>The temperature in °C.</value>
            <remarks>The calibration stored in the device is only valid for a certain temperature range.
            The <see cref="M:RgbDriverKit.CalibratedSpectrometer.CheckTemperature"/> method compares these values to the actual <see cref="P:RgbDriverKit.Spectrometer.Temperature"/> to determine if the device needs to be recalibrated.</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.CalibrationTemperatureDarkSpectra">
            <summary>Gets or sets the device temperature at which the dark spectra were calibrated.</summary>
            <value>The temperature in °C.</value>
            <remarks>The calibration stored in the device is only valid for a certain temperature range.
            The <see cref="M:RgbDriverKit.CalibratedSpectrometer.CheckTemperature"/> method compares these values to the actual <see cref="P:RgbDriverKit.Spectrometer.Temperature"/> to determine if the device needs to be recalibrated.</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.CalibrationTemperatureSensitivity">
            <summary>Gets or sets the device temperature at which the spectral sensitivity and power was calibrated.</summary>
            <value>The temperature in °C.</value>
            <remarks>The calibration stored in the device is only valid for a certain temperature range.
            The <see cref="M:RgbDriverKit.CalibratedSpectrometer.CheckTemperature"/> method compares these values to the actual <see cref="P:RgbDriverKit.Spectrometer.Temperature"/> to determine if the device needs to be recalibrated.</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.WavelengthCoefficients">
            <inheritdoc/>
            <remarks>Setting this property also sets the <see cref="P:RgbDriverKit.CalibratedSpectrometer.CalibrationTemperatureWavelengths"/> to the current device <see cref="P:RgbDriverKit.Spectrometer.Temperature"/>.
            In order to save any changes to this property persistently to the device memory, use <see cref="M:RgbDriverKit.CalibratedSpectrometer.SaveUserCalibration"/>. To undo changes,
            use <see cref="M:RgbDriverKit.CalibratedSpectrometer.LoadUserCalibration"/>.</remarks>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.AutoExposureMaxTime">
            <summary>Gets or sets the maximum time for autoexposure.</summary>
            <value>The auto exposure maximum time.</value>
            <exception cref="T:System.ArgumentException">Maximum time for autoexposure is too long.</exception>
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.AuxInterfaceType">
            <summary>Gets the type of the auxiliary interface.</summary>
            <value>The type of the auxiliary interface.</value>
            <remarks>This property may be removed in future versions.</remarks>
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.CalibratedSpectrometer.AuxInterface">
            <summary>Gets the auxiliary interface.</summary>
            <value>The auxiliary interface.</value>
            <remarks><para>Some devices may have an auxiliary digital interface to control other peripherals. This property refers to an instance
            of a class that is derived from <see cref="T:RgbDriverKit.CommunicationInterface"/> and used to send and receive data over this interface.</para>
            <para>This interface gets opened and close automatically together with this device.
            Do not call the <see cref="M:RgbDriverKit.CommunicationInterface.Open"/> or <see cref="M:RgbDriverKit.CommunicationInterface.Close"/> method
            of this object.</para></remarks>
        </member>
        <member name="T:RgbDriverKit.CalibratedSpectrometer.CalibrationDataFormat">
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.CalibratedSpectrometer.CalibrationDataInterfaceV2">
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.CommunicationInterface">
            <summary>Base class for a device communication interface that sends and receives byte data.</summary>
        </member>
        <member name="M:RgbDriverKit.CommunicationInterface.Open">
            <summary>Opens the interface.</summary>
        </member>
        <member name="M:RgbDriverKit.CommunicationInterface.Close">
            <summary>Closes the interface.</summary>
        </member>
        <member name="M:RgbDriverKit.CommunicationInterface.Read(System.Byte[])">
            <summary>Reads data from the device.</summary>
            <param name="buffer">An existing byte array to write the data into.</param>
            <returns>The number of bytes that were actually read.</returns>
            <remarks>The size of the buffer determines the maximum number of bytes to be read.
            If the communication interface does not have the ability to determine the end of the transmission,
            this method waits until all bytes are read and if a timeout occurs, an exception will be thrown.</remarks>
        </member>
        <member name="M:RgbDriverKit.CommunicationInterface.Read(System.Byte[],System.Int32)">
            <summary>Reads data from the device.</summary>
            <param name="buffer">An existing byte array to write the data into.</param>
            <param name="maxLength">The maximum number of bytes to read.</param>
            <returns>The number of bytes that were actually read.</returns>
        </member>
        <member name="M:RgbDriverKit.CommunicationInterface.Write(System.Byte[])">
            <summary>Writes data to the device.</summary>
            <param name="buffer">A byte array containing the data to be written.</param>
            <remarks>All bytes in the array are being sent.</remarks>
        </member>
        <member name="M:RgbDriverKit.CommunicationInterface.Write(System.Byte[],System.Int32)">
            <summary>Writes data to the device.</summary>
            <param name="buffer">A byte array containing the data to be written.</param>
            <param name="length">The number of bytes to be sent (starting at the beginning of the array).</param>
        </member>
        <member name="M:RgbDriverKit.CommunicationInterface.Purge">
            <summary>Clears input and output buffers.</summary>
        </member>
        <member name="M:RgbDriverKit.CommunicationInterface.ReadByte">
            <summary>Reads one byte.</summary>
            <returns>the byte</returns>
            <remarks>This method is blocking, which means, it waits until the byte is read. If a timeout occurs, an exception will be thrown.</remarks>
        </member>
        <member name="M:RgbDriverKit.CommunicationInterface.ReadLine">
            <summary>Reads one line of text until an EOL string (LF or CR+LF) is found.</summary>
            <returns>The text without the EOL string.</returns>
            <remarks>This method is blocking, which means, it waits until the EOL string is found. If a timeout occurs, an exception will be thrown.</remarks>
        </member>
        <member name="M:RgbDriverKit.CommunicationInterface.Write(System.Byte)">
            <summary>Writes one byte.</summary>
            <param name="value">The byte.</param>
        </member>
        <member name="M:RgbDriverKit.CommunicationInterface.Write(System.String)">
            <summary>Writes a string.</summary>
            <param name="text">The string.</param>
            <remarks>No line delimiter is added at the end.</remarks>
        </member>
        <member name="M:RgbDriverKit.CommunicationInterface.WriteLine(System.String)">
            <summary>Writes a string and adds an CR+LF EOL string.</summary>
            <param name="text">The string.</param>
        </member>
        <member name="P:RgbDriverKit.CommunicationInterface.IsOpen">
            <summary> Gets a value indicating whether the interface is open.</summary>
            <value><c>true</c> if the interface is open; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RgbDriverKit.CommunicationInterface.DeviceAddress">
            <summary>Gets or sets the device address.</summary>
            <value>The device address.</value>
            <remarks>This property only applies to communication interfaces with several devices sharing a common bus (like RS-485, I2C, USB or Ethernet).</remarks>
        </member>
        <member name="P:RgbDriverKit.CommunicationInterface.Timeout">
            <summary>Timeout for reading (and possibly writing) data.</summary>
            <value>The timeout in milliseconds.</value>
        </member>
        <member name="P:RgbDriverKit.CommunicationInterface.BytesToRead">
            <summary>Returns the number of bytes currently present in the input buffer.</summary>
        </member>
        <member name="T:RgbDriverKit.DeviceNotFoundException">
            <summary>This exception occurs if the device is not found while opening the connection.</summary>
        </member>
        <member name="M:RgbDriverKit.DeviceNotFoundException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.DeviceNotFoundException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:RgbDriverKit.DeviceNotFoundException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.DeviceNotFoundException"/> class.</summary>
        </member>
        <member name="M:RgbDriverKit.DeviceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.DeviceNotFoundException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:RgbDriverKit.DeviceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.DeviceNotFoundException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:RgbDriverKit.InvalidFirmwareException">
            <summary>This exception occurs if the device firmware is too old for this driver or the bootloader is activated.</summary>
        </member>
        <member name="M:RgbDriverKit.InvalidFirmwareException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.InvalidFirmwareException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:RgbDriverKit.InvalidFirmwareException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.InvalidFirmwareException"/> class.</summary>
        </member>
        <member name="M:RgbDriverKit.InvalidFirmwareException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.InvalidFirmwareException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:RgbDriverKit.InvalidFirmwareException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.InvalidFirmwareException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:RgbDriverKit.DeviceCommunicationException">
            <summary>Represents a device communication error, like a checksum mismatch.</summary>
        </member>
        <member name="M:RgbDriverKit.DeviceCommunicationException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.DeviceCommunicationException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:RgbDriverKit.DeviceCommunicationException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.DeviceCommunicationException"/> class.</summary>
        </member>
        <member name="M:RgbDriverKit.DeviceCommunicationException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.DeviceCommunicationException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:RgbDriverKit.DeviceCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.DeviceCommunicationException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:RgbDriverKit.DeviceMemoryFullException">
            <summary>Represents a device memory full error.</summary>
            <remarks>This error occurs when data to be stored in the device is larger than the available device memory.</remarks>
        </member>
        <member name="M:RgbDriverKit.DeviceMemoryFullException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.DeviceMemoryFullException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:RgbDriverKit.DeviceMemoryFullException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.DeviceMemoryFullException"/> class.</summary>
        </member>
        <member name="M:RgbDriverKit.DeviceMemoryFullException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.DeviceMemoryFullException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:RgbDriverKit.DeviceMemoryFullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.DeviceMemoryFullException"/> class.</summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:RgbDriverKit.ITemperatureControl">
            <summary>Extends a descendant of the Device class with the ability to read and control the temperature.</summary>
        </member>
        <member name="P:RgbDriverKit.ITemperatureControl.ActualTemperature">
            <summary>Gets the actual temperature.</summary>
            <value>The actual temperature in °C.</value>
        </member>
        <member name="P:RgbDriverKit.ITemperatureControl.TargetTemperature">
            <summary>Gets or sets the target temperature.</summary>
            <value>The target temperature in °C.</value>
        </member>
        <member name="E:RgbDriverKit.ITemperatureControl.TargetTemperatureChanged">
            <summary>Occurs when the <see cref="P:RgbDriverKit.ITemperatureControl.TargetTemperature"/> changes.</summary>
        </member>
        <member name="P:RgbDriverKit.ITemperatureControl.MinTemperature">
            <summary>Gets the minimum temperature.</summary>
            <value>The minimum temperature in °C.</value>
            <remarks>If the <see cref="P:RgbDriverKit.ITemperatureControl.TargetTemperature"/> can be set, this is the minimum value for it.</remarks>
            <remarks>Otherwise, this is the minimum temperature for the temperature range in which the device can be operated.</remarks>
        </member>
        <member name="P:RgbDriverKit.ITemperatureControl.MaxTemperature">
            <summary>Gets the maximum temperature.</summary>
            <value>The maximum temperature in °C.</value>
            <remarks>If the <see cref="P:RgbDriverKit.ITemperatureControl.TargetTemperature"/> can be set, this is the maximum value for it.</remarks>
            <remarks>Otherwise, this is the maximum temperature for the temperature range in which the device can be operated.</remarks>
        </member>
        <member name="P:RgbDriverKit.ITemperatureControl.TargetTemperatureReached">
            <summary>Gets a value indicating whether the <see cref="P:RgbDriverKit.ITemperatureControl.TargetTemperature"/> is reached.</summary>
            <value><c>true</c> if the target temperature is reached; otherwise, <c>false</c>.</value>
            <remarks>If the target temperature cannot be set, this value indicates if the laser is within operating temperature range.</remarks>
        </member>
        <member name="P:RgbDriverKit.ITemperatureControl.TemperatureControlEnabled">
            <summary>Gets or sets a value indicating whether active temperature control is turned on.</summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RgbDriverKit.ITemperatureControl.DefaultTemperature">
            <summary>Gets the default temperature.</summary>
            <value>The default temperature in °C.</value>
            <remarks>This is usually the temperature at which the device was calibrated or intended to operate.
            If there is no default temperature, this property returns NaN.</remarks>
        </member>
        <member name="P:RgbDriverKit.ITemperatureControl.TemperatureControlAvailable">
            <summary>Gets a value indicating whether this device has active temperature control.</summary>
            <value><c>true</c> if the device has active temperature control; otherwise <c>false</c>.</value>
            <remarks>The main purpose for this property is to be able to have a single device class for a range of
            device, only some of which may have temperature control.</remarks>
        </member>
        <member name="T:RgbDriverKit.Thermometer">
            <summary>Base class for thermometers.</summary>
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Thermometer.ActualTemperature">
            <summary>Gets the current measured temperature.</summary>
            <remarks>If the temperature is not available (for example due to a broken sensor), NaN is returned.</remarks>
        </member>
        <member name="T:RgbDriverKit.TemperatureController">
            <summary>Base class for temperature controllers.</summary>
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.OpticalPowermeter">
            <summary>Base class for optical powermeters.</summary>
        </member>
        <member name="M:RgbDriverKit.OpticalPowermeter.ZeroAdjust">
            <summary>Adjusts the offset of the optical power value to zero.</summary>
        </member>
        <member name="P:RgbDriverKit.OpticalPowermeter.Power">
            <summary>Gets the power in Watts.</summary>
        </member>
        <member name="P:RgbDriverKit.OpticalPowermeter.Wavelength">
            <summary>Gets or sets the wavelength in nm.</summary>
            <value>The wavelength.</value>
        </member>
        <member name="P:RgbDriverKit.OpticalPowermeter.MinWavelength">
            <summary>Gets the minimum wavelength for the <see cref="P:RgbDriverKit.OpticalPowermeter.Wavelength"/> property.</summary>
            <value>The minimum wavelength.</value>
        </member>
        <member name="P:RgbDriverKit.OpticalPowermeter.MaxWavelength">
            <summary>Gets the maximum wavelength for the <see cref="P:RgbDriverKit.OpticalPowermeter.Wavelength"/> property.</summary>
            <value>The maximum wavelength.</value>
        </member>
        <member name="P:RgbDriverKit.OpticalPowermeter.ApertureSize">
            <summary>Gets the size of the sensor aperture area.</summary>
            <value>The size of the aperture in mm² (or a negative value if not available).</value>
        </member>
        <member name="T:RgbDriverKit.Wavelengthmeter">
            <summary>Base class for wavelength meters.</summary>
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.PositionMotor">
            <summary>Base class for position motors (step motors or linear motors with position sensors).</summary>
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.Monochromator">
            <summary>Base class for monochromators.</summary>
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.Positioner">
            <summary>Base class for positioning stages.</summary>
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.PositionOrientation">
            <summary>Six-dimensional vector for specifying a position and orientation of a solid body in space.</summary>
            <remarks>The order of rotation is: 1. alpha, 2. beta, 3. gamma</remarks>
            <exclude/>
        </member>
        <member name="F:RgbDriverKit.PositionOrientation.X">
            <summary>The x-coordinate.</summary>
        </member>
        <member name="F:RgbDriverKit.PositionOrientation.Y">
            <summary>The y-coordinate.</summary>
        </member>
        <member name="F:RgbDriverKit.PositionOrientation.Z">
            <summary>The z-coordinate.</summary>
        </member>
        <member name="F:RgbDriverKit.PositionOrientation.Alpha">
            <summary>The alpha-angle (rotation around x-axis).</summary>
        </member>
        <member name="F:RgbDriverKit.PositionOrientation.Beta">
            <summary>The beta-angle (rotation around y-axis).</summary>
        </member>
        <member name="F:RgbDriverKit.PositionOrientation.Gamma">
            <summary>The gamma-angle (rotation around z-axis).</summary>
        </member>
        <member name="M:RgbDriverKit.PositionOrientation.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:RgbDriverKit.PositionOrientation"/> struct.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="z">The z-coordinate.</param>
            <param name="alpha">The alpha-angle.</param>
            <param name="beta">The beta-angle.</param>
            <param name="gamma">The gamma-angle.</param>
        </member>
        <member name="T:RgbDriverKit.DigitalInterface">
            <summary>Base class for digital interfaces.</summary>
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.FrequencyGenerator">
            <summary>Base class for frequency or function generators.</summary>
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.FrequencyGenerator.WaveformAvailable(RgbDriverKit.ModulationModes)">
            <summary>Gets whether a certain <see cref="P:RgbDriverKit.FrequencyGenerator.Waveform"/> is available.</summary>
            <param name="mode">One of the values of the <see cref="T:RgbDriverKit.Waveforms"/> enumeration.</param>
            <returns><c>true</c> if the waveform is available; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:RgbDriverKit.FrequencyGenerator.Frequency">
            <summary>Gets or sets the frequency.</summary>
            <value>The frequency in Hz.</value>
        </member>
        <member name="P:RgbDriverKit.FrequencyGenerator.Voltage">
            <summary>Gets or sets the voltage.</summary>
            <value>The voltage Vpeak.</value>
        </member>
        <member name="P:RgbDriverKit.FrequencyGenerator.OffsetVoltage">
            <summary>Gets or sets the offset voltage.</summary>
            <value>The offset voltage.</value>
        </member>
        <member name="P:RgbDriverKit.FrequencyGenerator.Waveform">
            <summary>Gets or sets the waveform.</summary>
            <value>One of the values of the <see cref="T:RgbDriverKit.Waveforms"/> enumeration.</value>
        </member>
        <member name="P:RgbDriverKit.FrequencyGenerator.Enabled">
            <summary>Gets or sets a value indicating whether the main output is enabled.</summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RgbDriverKit.FrequencyGenerator.DutyCycle">
            <summary>Gets or sets the duty cycle for rectangular waveforms.</summary>
            <value>The duty cycle as a fraction between 0 and 1.</value>
            <remarks>The default value is 0.5.</remarks>
        </member>
        <member name="P:RgbDriverKit.FrequencyGenerator.MaxFrequency">
            <summary>Gets the maximum frequency.</summary>
        </member>
        <member name="P:RgbDriverKit.FrequencyGenerator.MaxVoltage">
            <summary>Gets the maximum voltage.</summary>
        </member>
        <member name="T:RgbDriverKit.Waveforms">
            <summary>Possible values for the Waveform property.</summary>
            <exclude/>
        </member>
        <member name="F:RgbDriverKit.Waveforms.Sine">
            <summary>A sine wave.</summary>
        </member>
        <member name="F:RgbDriverKit.Waveforms.Rectangle">
            <summary>A rectangular (digital) wave.</summary>
        </member>
        <member name="F:RgbDriverKit.Waveforms.Triangle">
            <summary>A trinangular wave.</summary>
        </member>
        <member name="F:RgbDriverKit.Waveforms.RampUp">
            <summary>A wave that ramps up from the minimum to the maximum value during one period.</summary>
        </member>
        <member name="F:RgbDriverKit.Waveforms.RampDown">
            <summary>A wave that ramps down from the maximum to the minimum value during one period.</summary>
        </member>
        <member name="T:RgbDriverKit.SpectrometerProcessing">
            <summary>An enumeration representing the different pre-processing steps for spectra.</summary>
            <remarks>
            <see cref="F:RgbDriverKit.SpectrometerProcessing.RemoveTemporaryBadPixels"/>:
            In some image sensors, charges may build up in some pixel wells, causing aritficial single pixel spikes in the spectrum.
            These may be temporary and therefore difficult to remove via subtraction of a dark spectrum. This feature detects spikes that
            are smaller than the spectrometer resolution and must therefore be artifical and removes them from the spectrum.
            </remarks>
        </member>
        <member name="F:RgbDriverKit.SpectrometerProcessing.AdjustOffset">
            <summary>Adjust the offset using dark pixels. Includes spectrum trimming and changing spectrum orientation, if applicable.
            May also sort the pixels in the order of ascending wavelengths.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerProcessing.CorrectNonlinearity">
            <summary>Correct the non-linearity of the intensity axis.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerProcessing.RemovePermanentBadPixels">
            <summary>Remove bad pixels.</summary>        
        </member>
        <member name="F:RgbDriverKit.SpectrometerProcessing.SubtractDark">
            <summary>Obtain a dark spectrum for the current exposure time and subtract it from the measured data.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerProcessing.RemoveTemporaryBadPixels">
            <summary>Remove single pixel spikes. (Only if AdjustOffset is enabled.)</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerProcessing.CompensateStraylight">
            <summary>Estimate the amount of stray light and compensate it (Not used yet.)</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerProcessing.NormalizeExposureTime">
            <summary>Normalize the spectrum to an exposure time of 1 second.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerProcessing.SensitivityCalibration">
            <summary>Use the spectral sensitivity calibration.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerProcessing.CorrectPRNU">
            <summary>Correct the photo response non-uniformity. This smoothens the sensitivity curve while keeping its overall shape.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerProcessing.AdditionalFiltering">
            <summary>Apply additional filtering to compensate device-specific properties.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerProcessing.ScaleTo16BitRange">
            <summary>Scale values to a range of 0 - 65534 and clip larger values to 65535.</summary>
        </member>
        <member name="T:RgbDriverKit.AutoExposureResults">
            <summary>An enumeration representing the possible results of an auto-exposure control cycle.</summary>
            <exclude/>
        </member>
        <member name="F:RgbDriverKit.AutoExposureResults.NotChanged">
            <summary>The exposure time was not changed by auto-exposure.</summary>
        </member>
        <member name="F:RgbDriverKit.AutoExposureResults.Changed">
            <summary>The exposure time was changed by auto-exposure.</summary>
        </member>
        <member name="F:RgbDriverKit.AutoExposureResults.TooMuchLight">
            <summary>The light intensity is too strong to set a suitable exposure time.</summary>
        </member>
        <member name="F:RgbDriverKit.AutoExposureResults.TooLittleLight">
            <summary>The light intensity is too weak to set a suitable exposure time.</summary>
        </member>
        <member name="F:RgbDriverKit.AutoExposureResults.NotAvailable">
            <summary>(deprecated)</summary>
        </member>
        <member name="T:RgbDriverKit.SpectrumData">
            <summary>A class that stores a spectrum together with some metadata.</summary>
            <remarks>This is the return value of the <see cref="M:RgbDriverKit.CalibratedSpectrometer.GetSpectrumData"/> method.</remarks>
        </member>
        <member name="F:RgbDriverKit.SpectrumData.Spectrum">
            <summary>The spectrum as a float array.</summary>
            <remarks>This is the same data as returned by the <see cref="M:RgbDriverKit.Spectrometer.GetSpectrum"/> method. The length of this array corresponds to <see cref="P:RgbDriverKit.Spectrometer.PixelCount"/>.</remarks>
        </member>
        <member name="F:RgbDriverKit.SpectrumData.ExposureTime">
            <summary>The exposure time for this spectrum.</summary>
            <value>The exposure time in seconds.</value>
        </member>
        <member name="F:RgbDriverKit.SpectrumData.Averaging">
            <summary>The averaging value for this spectrum.</summary>
            <value>The number of spectra that were averaged over. 1 = no averaging.</value>
        </member>
        <member name="F:RgbDriverKit.SpectrumData.TimeStamp">
            <summary>The time stamp of this spectrum.</summary>
            <value>The date and time of the start of the exposure according to the system clock.</value>
            <remarks>This is the same value as the <see cref="P:RgbDriverKit.Spectrometer.TimeStamp"/> property after <see cref="M:RgbDriverKit.Spectrometer.GetSpectrum"/> is called.</remarks>
        </member>
        <member name="F:RgbDriverKit.SpectrumData.LoadLevel">
            <summary>The load level of this spectrum.</summary>
            <value>0 = no signal, 1.0 = maximum level for good signal, &gt; 1.0 = overload</value>
            <remarks>This is the same value as the <see cref="P:RgbDriverKit.Spectrometer.LoadLevel"/> property after <see cref="M:RgbDriverKit.Spectrometer.GetSpectrum"/> is called.</remarks>
        </member>
        <member name="F:RgbDriverKit.SpectrumData.Temperature">
            <summary>The internal device temperature at the time of the exposure.</summary>
            <value>The internal device temperature in °C.</value>
            <remarks>This is the same value as returned by the <see cref="P:RgbDriverKit.Spectrometer.Temperature"/> property. If <see cref="P:RgbDriverKit.Spectrometer.CanReadTemperature"/> is
            set to <c>false</c>, the temperature is not available and this value is below -273.</remarks>
        </member>
        <member name="F:RgbDriverKit.SpectrumData.AppliedProcessingSteps">
            <summary>The Processing steps that were applied to this spectrum.</summary>
            <value>The processing steps.</value>
            <remarks>This value is the same as <see cref="P:RgbDriverKit.CalibratedSpectrometer.ProcessingSteps"/> at the time of reading out this spectrum.</remarks>
        </member>
        <member name="F:RgbDriverKit.SpectrumData.IntensityUnit">
            <summary>The unit of the y axis of the spectrum.</summary>
            <value>The y axis unit.</value>
        </member>
        <member name="F:RgbDriverKit.SpectrumData.SaturationValue">
            <summary>The saturation level for this spectrum.</summary>
            <value>The spectrum value above which saturation effects occur (or -1 if not applicable).</value>
            <remarks><para>When any spectrum value is larger than this value, the spectrometer is overloaded.
            When the spectrum is modified by processing steps, this value is being updated.</para>
            <para>After certain processing steps have been applied, the saturation level may not be the same value for all pixels anymore.
            In this case, this value is set to -1.</para></remarks>
            <exclude/>
        </member>
        <member name="F:RgbDriverKit.SpectrumData.OffsetAvg">
            <exclude/>
        </member>
        <member name="F:RgbDriverKit.SpectrumData.DarkAvg">
            <exclude/>
        </member>
        <member name="F:RgbDriverKit.SpectrumData.ReadoutNoise">
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.SpectrometerUnits">
            <summary>An enumeration representing different units of the y axis of a spectrum delivered from a spectrometer.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerUnits.Unknown">
            <summary>The unit is not determined.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerUnits.ADCvalues">
            <summary>Values obtained from the A/D converter (a.k.a "counts").</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerUnits.ADCnormalized">
            <summary>Values obtained from the A/D converter and normalized to full scale = 100 at 1 second.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerUnits.nWnm">
            <summary>Spectral power in nanowatts per nm</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerUnits.mWm2nm">
            <summary>Spectral irradiance in milliwatts per square-meter per nm</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerUnits.Wsrm2nm">
            <summary>Spectral radiance in watts per steradian per square-meter per nm</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerUnits.Wsrnm">
            <summary>Spectral radiant intensity in watts per steradian per nm </summary>
        </member>
        <member name="T:RgbDriverKit.AuxInterfaces">
            <summary>An enumeration representing the different types of auxiliary interfaces.</summary>
            <exclude/>
        </member>
        <member name="F:RgbDriverKit.AuxInterfaces.None">
            <summary>No auxiliary interface present.</summary>
        </member>
        <member name="F:RgbDriverKit.AuxInterfaces.I2C">
            <summary>I2C</summary>
        </member>
        <member name="F:RgbDriverKit.AuxInterfaces.SPI">
            <summary>SPI</summary>
        </member>
        <member name="F:RgbDriverKit.AuxInterfaces.RS232">
            <summary>A serial RS232 interface</summary>
        </member>
        <member name="F:RgbDriverKit.AuxInterfaces.I2CLowLevel">
            <summary>I2C with a low-level protocol</summary>
        </member>
        <member name="T:RgbDriverKit.FtdiInterface">
            <summary>Device interface for communication to an FTDI chip via the FTDI library.</summary>
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.SpiViaFtdiInterface">
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.FtdiWinUsbInterface">
            <summary>Device interface for communication to an FTDI chip via WinUSB.</summary>
            <remarks>This class does not have a method to find the USB device path. Use the static method <see cref="M:RgbDriverKit.WinUsbInterface.GetUsbDevicePaths(System.String,System.Guid)"/> instead.</remarks>
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.FtdiWinUsbInterface.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.WinUsbInterface"/> class.</summary>
            <param name="DevicePath">The device path.</param>
            <remarks>This constructor does not throw exceptions. If the Manufacturer, Product and SerialNumber properties cannot be read out from the device, 
            they remain empty strings. This happens especially if the device connection is already open.</remarks>
        </member>
        <member name="T:RgbDriverKit.FT232H_EepromStructure">
            <exclude/> 
        </member>
        <member name="T:RgbDriverKit.FT232H_CBUS">
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.RgbLaser">
            <summary>
            Device class for controlling NovaPro, MiniLas, Nano 250 and Nano 100 laser modules.
            </summary>
        </member>
        <member name="T:RgbDriverKit.AdjustableLightSource">
            <summary>Base class for light sources with features for adjusting the output power and modulation.</summary>
        </member>
        <member name="T:RgbDriverKit.LightSource">
            <summary>Base class for light sources.</summary>
        </member>
        <member name="P:RgbDriverKit.LightSource.Enabled">
            <summary>Gets or sets a value indicating whether emission from this <see cref="T:RgbDriverKit.LightSource"/> is enabled.</summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
            <remarks><para>Actual radiation may also depend on turn-on-delay, interlock, key lock, operating temperature, <see cref="P:RgbDriverKit.AdjustableLightSource.OutputPower"/> and <see cref="P:RgbDriverKit.AdjustableLightSource.ModulationMode"/>.</para>
            <para>The device may have an LED to indicate this value (preferably yellow) and/or a push-button to toggle it.</para></remarks>
        </member>
        <member name="P:RgbDriverKit.LightSource.Type">
            <summary>Gets the type of the light source.</summary>
            <value>One of the values of the <see cref="T:RgbDriverKit.LightSourceType"/> enumeration.</value>
        </member>
        <member name="P:RgbDriverKit.LightSource.Wavelength">
            <summary>Gets the wavelength.</summary>
            <value>The wavelength in nm. Returns <c>0</c> if the peak wavelength is unknown or undefined.</value>
            <remarks>This value refers to the peak wavelength, if possible. If a peak wavelength cannot be clearly determined,
            it may refer to the dominant wavelength. Not all light sources support setting the wavelength.</remarks>
            <exception cref="T:System.NotSupportedException">Setting the wavelength is not supported by this device.</exception>
        </member>
        <member name="P:RgbDriverKit.LightSource.TotalOperatingTime">
            <summary>Gets the total operating time.</summary>
            <value>The total operating time. Returns <c>TimeSpan.Zero</c> if not supported.</value>
            <remarks>This value counts the total time for the device during which light emission was possible (= all <see cref="P:RgbDriverKit.LightSource.Status"/> flags were low).</remarks>
        </member>
        <member name="P:RgbDriverKit.LightSource.Status">
            <summary>Gets the status.</summary>
            <value>One of the values of the <see cref="T:RgbDriverKit.LightSourceStatusFlags"/> enumeration.</value>
            <remarks>
            <para>Light emission is possible when this value is 0 (= all flags are low). Actual emission may also depend on <see cref="P:RgbDriverKit.AdjustableLightSource.OutputPower"/> and <see cref="P:RgbDriverKit.AdjustableLightSource.ModulationMode"/>.</para>
            <para>The condition Status == 0 may be indicated by a red LED on the device.</para>
            </remarks>
        </member>
        <member name="E:RgbDriverKit.LightSource.EnabledChanged">
            <summary>Occurs when the <see cref="P:RgbDriverKit.LightSource.Enabled"/> property has changed.</summary>
        </member>
        <member name="F:RgbDriverKit.AdjustableLightSource.LightIntensityUnitString">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.AdjustableLightSource.ModulationModeAvailable(RgbDriverKit.ModulationModes)">
            <summary>Gets whether a certain <see cref="P:RgbDriverKit.AdjustableLightSource.ModulationMode"/> is available.</summary>
            <param name="mode">One of the values of the <see cref="T:RgbDriverKit.ModulationModes"/> enumeration.</param>
            <returns><c>true</c> if the modulation mode is available; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:RgbDriverKit.AdjustableLightSource.OutputPower">
            <summary>Gets or sets the output power.</summary>
            <value>The unit of this value is given by <see cref="P:RgbDriverKit.AdjustableLightSource.OutputPowerUnit"/>.</value>
        </member>
        <member name="P:RgbDriverKit.AdjustableLightSource.MaxOutputPower">
            <summary>Gets the maximum output power.</summary>
            <value>The maximum output power in <see cref="P:RgbDriverKit.AdjustableLightSource.OutputPowerUnit"/> units.</value>
        </member>
        <member name="P:RgbDriverKit.AdjustableLightSource.OutputPowerUnit">
            <summary>Gets the unit in which the <see cref="P:RgbDriverKit.AdjustableLightSource.OutputPower"/> is specified.</summary>
            <value>The unit of the output power.</value>
        </member>
        <member name="E:RgbDriverKit.AdjustableLightSource.OutputPowerChanged">
            <summary>Occurs when the <see cref="P:RgbDriverKit.AdjustableLightSource.OutputPower"/> has changed.</summary>
        </member>
        <member name="P:RgbDriverKit.AdjustableLightSource.ModulationMode">
            <summary>Gets or sets the modulation mode.</summary>
            <value>One of the values of the <see cref="T:RgbDriverKit.ModulationModes"/> enumeration.</value>
            <value>The modulation mode.</value>
        </member>
        <member name="P:RgbDriverKit.AdjustableLightSource.InternalModulationRepetitionTime">
            <summary>Gets or sets the pulse repetition time for internal modulation.</summary>
            <value>The repetition time in seconds.</value>
        </member>
        <member name="P:RgbDriverKit.AdjustableLightSource.InternalModulationPulseWidth">
            <summary>Gets or sets the width of the light pulse for internal modulation.</summary>
            <value>The pulse width in seconds.</value>
            <remarks>If this value is larger that the repetition time, the light emission is always on.
            Any negative value means a duty cycle of 50 %. This is the default value.</remarks>
        </member>
        <member name="P:RgbDriverKit.AdjustableLightSource.InternalModulationMinWidth">
            <summary>Gets the minimum time for the pulse width and repetition time for internal modulation.</summary>
            <value>The minimum time in seconds.</value>
            <remarks>The values for <see cref="P:RgbDriverKit.AdjustableLightSource.InternalModulationRepetitionTime"/> and <see cref="P:RgbDriverKit.AdjustableLightSource.InternalModulationPulseWidth"/> 
            should be a multiple of this value, otherwise they are rounded towards the nearest multiple.</remarks>
        </member>
        <member name="M:RgbDriverKit.RgbLaser.SearchDevices">
            <summary>Searches for lasers of this kind.</summary>
            <returns>An array with <see cref="T:RgbDriverKit.RgbLaser"/> objects, one for each laser that was found.</returns>
            <remarks>
            <para>The returned laser objects have the serial number and model name set properly.</para>
            <para>The idea is that you call this method at program start and then let the user choose one of the returned device objects
            (if several devices are connected). Afterwards, you can start using the selected device by calling the <see cref="M:RgbDriverKit.RgbLaser.Open"/> method.</para>
            </remarks>
        </member>
        <member name="M:RgbDriverKit.RgbLaser.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of the <see cref="T:RgbDriverKit.RgbLaser"/> class.</summary>
            <param name="ftdiSerialNo">The <see cref="P:RgbDriverKit.RgbLaser.FtdiSerialNo"/>.</param>
            <param name="modelName">The <see cref="P:RgbDriverKit.Device.ModelName"/>.</param>
            <remarks>You can use this constructor to access a laser with a given serial number and model name.
            If you want to let the user choose which device to use, don't use this constructor and use <see cref="M:RgbDriverKit.RgbLaser.SearchDevices"/> instead.</remarks>
        </member>
        <member name="M:RgbDriverKit.RgbLaser.IsSameDeviceAs(RgbDriverKit.Device)">
            <summary>Determines whether the specified <see cref="T:RgbDriverKit.Device"/> refers to the same physical device as this instance.</summary>
            <param name="OtherDevice">The <see cref="T:RgbDriverKit.Device"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:RgbDriverKit.Device"/> refers to the same physical device; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="OtherDevice"/> parameter is null.</exception>
            <remarks>This implementation compares the FTDI serial numbers of both objects (if both are instances of <see cref="T:RgbDriverKit.RgbLaser"/>).</remarks>
        </member>
        <member name="M:RgbDriverKit.RgbLaser.Open">
            <summary>Opens the connection to the device.</summary>
            <exception cref="T:RgbDriverKit.DeviceNotFoundException">The device specified by the constructor parameters cannot be found.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device is not supported by this class.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbLaser.Close">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.RgbLaser.CheckDeviceRemoved">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.RgbLaser.OpenForDebug">
            <summary>Tries to open the communication to the device for debugging and firmware update.</summary>
            <remarks>Used for updating the firmware on an outdated device.</remarks>
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.RgbLaser.StartIspBootloader(System.String)">
            <summary>Starts the ISP bootloader.</summary>
            <param name="password">The password for updating the device firmware.</param>
            <exclude/> 
        </member>
        <member name="M:RgbDriverKit.RgbLaser.ReadString(System.String)">
            <exclude/> 
        </member>
        <member name="M:RgbDriverKit.RgbLaser.WriteString(System.String,System.String)">
            <exclude/> 
        </member>
        <member name="P:RgbDriverKit.RgbLaser.FtdiSerialNo">
            <summary>Gets the device serial number as stored in the FTDI chip.</summary>
            <remarks><para>This is similar, but not identical to the <see cref="P:RgbDriverKit.Device.SerialNo"/> value.</para>
            <para>This may be used to create an instance of this class for a specific device.
            The bootloader also needs this in order to reopen then device.</para></remarks>
        </member>
        <member name="P:RgbDriverKit.RgbLaser.Enabled">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbLaser.Type">
            <inheritdoc/>
            <value>Always returns the type <see cref="F:RgbDriverKit.LightSourceType.Laser"/>.</value>
        </member>
        <member name="P:RgbDriverKit.RgbLaser.TotalOperatingTime">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbLaser.Status">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbLaser.OutputPower">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The new value is too large or too small.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbLaser.ModulationMode">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.ArgumentException">Modulation mode not supported by device.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbLaser.ActualTemperature">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbLaser.TargetTemperature">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed or the target temperature cannot be set.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The new value is too large or too small.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbLaser.TargetTemperatureReached">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbLaser.TemperatureControlAvailable">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.RgbLaser.TemperatureControlEnabled">
            <exclude/>
        </member>
        <member name="E:RgbDriverKit.RgbLaser.TargetTemperatureChanged">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.RgbLaser.MinTemperature">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.RgbLaser.MaxTemperature">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.RgbLaser.DefaultTemperature">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.RgbLaser.HardwareVersion">
            <summary>Gets the device hardware version.</summary>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbLaser.SoftwareVersion">
            <summary>Gets the device firmware version.</summary>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbLaser.ModelID">
            <summary>Gets the model ID.</summary>
            <remarks>For devices made by RGB Photonics, this value starts with "ID" and is followed by a 4-digit number.</remarks>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbLaser.FeatureDescription">
            <summary>Gets a string describing the optional features of this laser.</summary>
        </member>
        <member name="P:RgbDriverKit.RgbLaser.OperationErrorString">
            <summary>Get the device error as a string.</summary>
            <remarks>This property should be read to get further information when the <see cref="P:RgbDriverKit.RgbLaser.Status"/> property
            includes the <see cref="F:RgbDriverKit.LightSourceStatusFlags.Error"/> flag.</remarks>
        </member>
        <member name="T:RgbDriverKit.LightSourceStatusFlags">
            <summary>Possible values of the <see cref="P:RgbDriverKit.LightSource.Status"/> property of the <see cref="T:RgbDriverKit.LightSource"/> class.</summary>
            <remarks>
            <para>A value of 0 means: Light will be emitted (if <see cref="P:RgbDriverKit.AdjustableLightSource.OutputPower"/> and <see cref="P:RgbDriverKit.AdjustableLightSource.ModulationMode"/> are set accordingly).</para>
            <para>TurnOnDelay excludes all other flags.</para>
            <para>TemeperatureTooLow AND TemperatureTooHigh at the same time means: temperature out of range, not determined if too low or too high.</para>
            <para>TemperatureTooLow or TemperatureTooHigh means: No emission possible due to temperature. It does not generally mean: target temperature not reached.</para>
            </remarks>
        </member>
        <member name="F:RgbDriverKit.LightSourceStatusFlags.Disabled">
            <summary>This is the inverse of the <see cref="P:RgbDriverKit.LightSource.Enabled"/> property.</summary>
        </member>
        <member name="F:RgbDriverKit.LightSourceStatusFlags.KeyswitchOpen">
            <summary>The Key switch is open, disabling emission.</summary>
        </member>
        <member name="F:RgbDriverKit.LightSourceStatusFlags.InterlockOpen">
            <summary>The Interlock is open, disabling emission.</summary>
        </member>
        <member name="F:RgbDriverKit.LightSourceStatusFlags.TurnOnDelay">
            <summary>The device is currently waiting for 5 seconds before turn-on, as required by laser safety regulation.</summary>
        </member>
        <member name="F:RgbDriverKit.LightSourceStatusFlags.TemperatureTooLow">
            <summary>The temperature is too low for operation.</summary>
        </member>
        <member name="F:RgbDriverKit.LightSourceStatusFlags.TemperaureTooHigh">
            <summary>The temperature is too high for operation.</summary>
        </member>
        <member name="F:RgbDriverKit.LightSourceStatusFlags.Error">
            <summary>Operation not possible due to an error not described by any other status flags.</summary>
        </member>
        <member name="F:RgbDriverKit.LightSourceStatusFlags.NeedsReplacement">
            <summary>The light bulb or diode is broken and needs to be replaced.</summary>
        </member>
        <member name="T:RgbDriverKit.LightSourceType">
            <summary>Possible values of the <see cref="P:RgbDriverKit.LightSource.Type"/> property of the <see cref="T:RgbDriverKit.LightSource"/> class.</summary>
        </member>
        <member name="F:RgbDriverKit.LightSourceType.IncandescentLamp">
            <summary>An incandescent lamp.</summary>
        </member>
        <member name="F:RgbDriverKit.LightSourceType.FluorescentLamp">
            <summary>A fluorescent lamp.</summary>
        </member>
        <member name="F:RgbDriverKit.LightSourceType.GasDischargeLamp">
            <summary>A gas-discharge lamp (excluding fluorescent lamps).</summary>
        </member>
        <member name="F:RgbDriverKit.LightSourceType.LED">
            <summary>A light-emitting diode.</summary>
        </member>
        <member name="F:RgbDriverKit.LightSourceType.Laser">
            <summary>A laser.</summary>
        </member>
        <member name="F:RgbDriverKit.LightSourceType.TunableMonochromaticLightSource">
            <summary>A tunable monochromatic light source.</summary>
        </member>
        <member name="F:RgbDriverKit.LightSourceType.Other">
            <summary>Any other type of light source.</summary>
        </member>
        <member name="T:RgbDriverKit.ModulationModes">
            <summary>Possible values for the ModulationMode.</summary>
            <remarks>Some devices have a modulation mode switch. This switch is now only for stand-alone operation without a PC connection.</remarks>
        </member>
        <member name="F:RgbDriverKit.ModulationModes.InternalConstant">
            <summary>The light source is operated at a constant output power (no modulation).</summary>
        </member>
        <member name="F:RgbDriverKit.ModulationModes.InternalPulseGenerator">
            <summary>The light source emits repeated light pulses generated by an internal pulse generator.</summary>
        </member>
        <member name="F:RgbDriverKit.ModulationModes.InternalTriggered">
            <summary>The light source emits pulses each time an external trigger signal is received.</summary>
        </member>
        <member name="F:RgbDriverKit.ModulationModes.ExternalDigital">
            <summary>The light source is digitally modulated (= turned on and off) by an external modulation signal.</summary>
        </member>
        <member name="F:RgbDriverKit.ModulationModes.ExternalAnalog">
            <summary>The output power of the light source is modulated by an external analog modulation signal.</summary>
        </member>
        <member name="F:RgbDriverKit.ModulationModes.ExternalCombined">
            <summary>External analog and digital modulation are combined.</summary>
        </member>
        <member name="T:RgbDriverKit.LightIntensityUnits">
            <summary>Possible units in which light intensity can be measured.</summary>
        </member>
        <member name="F:RgbDriverKit.LightIntensityUnits.Arbitrary">
            <summary>Light measured in another unspecified unit</summary>
        </member>
        <member name="F:RgbDriverKit.LightIntensityUnits.Milliwatt">
            <summary>Optical power measured in milliwatt</summary>
        </member>
        <member name="F:RgbDriverKit.LightIntensityUnits.MilliwattPerCmSquare">
            <summary>Irradiance measured in milliwatt per cm^2</summary>
        </member>
        <member name="F:RgbDriverKit.LightIntensityUnits.MilliwattPerSteradian">
            <summary>Radiant intensity measured in milliwatt per steradian</summary>
        </member>
        <member name="F:RgbDriverKit.LightIntensityUnits.Lumen">
            <summary>Luminous flux measured in lumen</summary>
        </member>
        <member name="F:RgbDriverKit.LightIntensityUnits.Lux">
            <summary>Illuminance measured in lux</summary>
        </member>
        <member name="F:RgbDriverKit.LightIntensityUnits.Candela">
            <summary>Luminous intensity measured in candela</summary>
        </member>
        <member name="F:RgbDriverKit.LightIntensityUnits.Percent">
            <summary>Percent (arbitrary unit)</summary>
        </member>
        <member name="F:RgbDriverKit.LightIntensityUnits.Volt">
            <summary>Volt (arbitrary unit)</summary>
        </member>
        <member name="F:RgbDriverKit.LightIntensityUnits.Milliampere">
            <summary>Milliampere (arbitrary unit)</summary>
        </member>
        <member name="T:RgbDriverKit.ISpectrum">
            <summary>Extends the LightSource class (or one of its descendants) with the capability to provide a spectrum of the light source.</summary>
            <remarks>This spectrum could be a generic, previously measured or real-time measured spectrum.</remarks>
        </member>
        <member name="P:RgbDriverKit.ISpectrum.SpectrumValues">
            <summary>Gets the intensity values of the light source spectrum.</summary>
            <value>The spectrum values in arbitrary units.</value>
            <remarks>Please see <see cref="P:RgbDriverKit.ISpectrum.SpectrumIsLineSpectrum"/> for more information on the meaning of these values.</remarks>
        </member>
        <member name="P:RgbDriverKit.ISpectrum.SpectrumWavelengths">
            <summary>Gets the wavelength values of the light source spectrum.</summary>
            <value>The wavelength values in nm.</value>
            <remarks>Please see <see cref="P:RgbDriverKit.ISpectrum.SpectrumIsLineSpectrum"/> for more information on the meaning of these values.</remarks>
        </member>
        <member name="P:RgbDriverKit.ISpectrum.SpectrumIsRealTime">
            <summary>Gets a value indicating whether the light source spectrum is measured in real-time.</summary>
            <value><c>true</c> if this spectrum is measured in real-time; <c>false</c> if this is a generic or previously measured spectrum.</value>
        </member>
        <member name="P:RgbDriverKit.ISpectrum.SpectrumIsLineSpectrum">
            <summary>Gets a value indicating whether the spectrum is a line spectrum.</summary>
            <value><c>true</c> if the spectrum is a line spectrum, <c>false</c> if it is a continuous spectrum.</value>
            <remarks>If the spectrum is a line spectrum, the <see cref="P:RgbDriverKit.ISpectrum.SpectrumWavelengths"/> array consists of the wavelengths of
            the spectral lines and the <see cref="P:RgbDriverKit.ISpectrum.SpectrumValues"/> array indicates their relative intensity. If the spectrum
            is a continuous spectrum, these two arrays are the wavelength and intensity values of a regular spectrum.</remarks>
        </member>
        <member name="T:RgbDriverKit.IMultipleLightSource">
            <summary>Extends the LightSource class (or one of its descendants) to control a combination of several light sources in one device.</summary>
            <remarks>This could be for example a multi-colored laser, an adjustable RGB light or a Deuterium Halogen light. 
            In this interface, the individual light sources are referred to  as "components".</remarks>
        </member>
        <member name="M:RgbDriverKit.IMultipleLightSource.GetComponentPower(System.Int32)">
            <summary>Gets the output power of a component.</summary>
            <param name="Component">The component index.</param>
            <returns>The output power of the component.</returns>
            <remarks>The unit of this value is given by <see cref="P:RgbDriverKit.IMultipleLightSource.ComponentPowerUnit"/>.</remarks>
        </member>
        <member name="M:RgbDriverKit.IMultipleLightSource.SetComponentPower(System.Int32,System.Single)">
            <summary>Sets the output power of a component.</summary>
            <param name="Component">The component index.</param>
            <param name="Value">The component power.</param>
            <value>The unit of this value is given by <see cref="P:RgbDriverKit.IMultipleLightSource.ComponentPowerUnit"/>.</value>
        </member>
        <member name="M:RgbDriverKit.IMultipleLightSource.GetMaxComponentPower(System.Int32)">
            <summary>Gets the maximum output power of a component.</summary>
            <param name="Component">The component index.</param>
            <returns>The maximum output power of the component in <see cref="P:RgbDriverKit.IMultipleLightSource.ComponentPowerUnit"/> units.</returns>
        </member>
        <member name="M:RgbDriverKit.IMultipleLightSource.GetComponentName(System.Int32)">
            <summary>Gets the name of a component.</summary>
            <param name="Component">The component index.</param>
            <returns>The name of the component.</returns>
        </member>
        <member name="M:RgbDriverKit.IMultipleLightSource.GetComponentWavelength(System.Int32)">
            <summary>Gets the wavelength of a component.</summary>
            <param name="Component">The component index.</param>
            <returns>The wavelength in nm. Returns <c>0</c> if the peak wavelength is unknown or undefined.</returns>
            <remarks>This value refers to the peak wavelength, if possible. If a peak wavelength cannot be clearly determined,
            it may refer to the dominant wavelength.</remarks>
        </member>
        <member name="P:RgbDriverKit.IMultipleLightSource.NumComponents">
            <summary>Gets the number of components of this light source.</summary>
        </member>
        <member name="P:RgbDriverKit.IMultipleLightSource.ComponentPowerUnit">
            <summary>Gets the unit in which all individual component power values are specified.</summary>
            <value>The unit of the component power values.</value>
        </member>
        <member name="P:RgbDriverKit.IMultipleLightSource.MaxOutputPowerWithoutColorShift">
            <summary>Gets the maximum output power that can be achieved with the current color.</summary>
            <value>The maximum output power in mW.</value>
            <remarks>This is the maximum output power that can be set without changing the currently selected ratio between the individual components.</remarks>
        </member>
        <member name="T:RgbDriverKit.LinearizedLightSource">
            <summary>Base class for linearity-corrected adjustable light sources.</summary>
        </member>
        <member name="M:RgbDriverKit.LinearizedLightSource.SaveUserCalibration">
            <summary>Saves the user calibration.</summary>
            <remarks>This implementation saves the calibration data to the hard disk. 
            Override this method in order to save calibration data to the device.</remarks>
        </member>
        <member name="M:RgbDriverKit.LinearizedLightSource.SaveUserCalibrationToFile(System.String)">
            <summary>Saves the user calibration to a file.</summary>
            <param name="Filename">The filename.</param>
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.LinearizedLightSource.LoadUserCalibration">
            <summary>Loads the user calibration.</summary>
            <remarks><para>This implementation loads the calibration data from the hard disk.
            Override this method in order to load calibration data from the device.</para>
            <para>This method does not throw any exceptions.</para></remarks>
        </member>
        <member name="M:RgbDriverKit.LinearizedLightSource.LoadUserCalibrationFromFile(System.String)">
            <summary>Loads the user calibration from a file.</summary>
            <param name="Filename">The filename.</param>
            <remarks>This method does not throw any exceptions.</remarks>
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.LinearizedLightSource.UseLinearityCorrection">
            <summary> Gets or sets a value indicating whether to correct the linearity of the output power.</summary>
            <value><c>true</c> if the linearity correction ia to be used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RgbDriverKit.LinearizedLightSource.LinearityCoefficients">
            <summary>Gets or sets the linearity coefficients.</summary>
            <value>A float array containing the nonlinearity coefficients. In the default case of a quadratic polynomial, this
            should be an array with 3 elements containing the constant [0], linear [1] and quadratic [2] term
            of the quadratic polynomial used for correcting the linearity. This value may be <c>null</c>, for example when
            loading the calibration data failed.</value>
            <remarks>In order to save any changes to this property, use <see cref="M:RgbDriverKit.LinearizedLightSource.SaveUserCalibration"/>. To undo changes,
            use <see cref="M:RgbDriverKit.LinearizedLightSource.LoadUserCalibration"/>.</remarks>
        </member>
        <member name="P:RgbDriverKit.LinearizedLightSource.CalibrationDataPath">
            <summary>Path for storing local calibration data.</summary>
            <remarks>Used for devices that do not have a nonvolatile memory for storing calibration data.</remarks>
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.NioLinkSerialPortInterface">
            <summary>A communication interface using an RS-232-type serial port.</summary>
            <remarks>This is a wrapper for the SerialPort class provided by the .NET framework.</remarks>
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.NioLinkSerialPortInterface.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.SerialPortInterface"/> class.</summary>
            <param name="PortName">The name of the serial port.</param>
        </member>
        <member name="M:RgbDriverKit.NioLinkSerialPortInterface.Open">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.NioLinkSerialPortInterface.Close">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.NioLinkSerialPortInterface.Read(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.NioLinkSerialPortInterface.Write(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.NioLinkSerialPortInterface.Purge">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.NioLinkSerialPortInterface.ReadByte">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.NioLinkSerialPortInterface.ReadLine">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.NioLinkSerialPortInterface.Write(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.NioLinkSerialPortInterface.WriteLine(System.String)">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.NioLinkSerialPortInterface.BaudRate">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.NioLinkSerialPortInterface.IsOpen">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.NioLinkSerialPortInterface.Timeout">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.NioLinkSerialPortInterface.BytesToRead">
            <inheritdoc />
        </member>
        <member name="T:RgbDriverKit.Qseries">
            <summary>
            Device class for controlling new Qseries spectrometers.
            </summary>
            <remarks>
            Communicates with the device via WinUSB.
            </remarks>
        </member>
        <member name="F:RgbDriverKit.Qseries.InterfaceClassGuid">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Qseries.SearchDevices">
            <summary>Searches for spectrometers of this kind.</summary>
            <returns>An array with <see cref="T:RgbDriverKit.Qseries"/> objects, one for each spectrometer that was found.</returns>
            <remarks>
            <para>The returned spectrometer objects have the serial number and model name set properly.</para>
            <para>The idea is that you call this method at program start and then let the user choose one of the returned device objects
            (if several devices are connected). Afterwards, you can start using the selected device by calling the <see cref="M:RgbDriverKit.Qseries.Open"/> method.</para>
            </remarks>
        </member>
        <member name="M:RgbDriverKit.Qseries.SearchDevices(System.Boolean)">
            <summary>Searches for spectrometers of this kind.</summary>
            <param name="ActiveScan">If set to <c>false</c>, the search also includes serial ports that may have a spectrometer with UART interface connected to them.</param>
            <returns>An array with <see cref="T:RgbDriverKit.Qseries"/> objects, one for each spectrometer that was found.</returns>
            <remarks>
            <para>The returned spectrometer objects have the serial number and model name set properly.</para>
            <para>The idea is that you call this method at program start and then let the user choose one of the returned device objects
            (if several devices are connected). Afterwards, you can start using the selected device by calling the <see cref="M:RgbDriverKit.Qseries.Open"/> method.</para>
            <para>In most cases, the parameter should be set to <c>true</c>, unless you are using spectrometers with UART interface.</para>
            </remarks>
        </member>
        <member name="M:RgbDriverKit.Qseries.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.Qseries"/> class.</summary>
            <param name="DevicePath">The DevicePath as returned from the WinUSB function <c>SetupDiGetDeviceInterfaceDetail</c>.</param>
            <remarks>You can use this constructor to access a spectrometer with a given device path.
            If you want to let the user choose which device to use, don't use this constructor and use <see cref="M:RgbDriverKit.Qseries.SearchDevices"/> instead.</remarks>
        </member>
        <member name="M:RgbDriverKit.Qseries.IsSameDeviceAs(RgbDriverKit.Device)">
            <summary>Determines whether the specified <see cref="T:RgbDriverKit.Device"/> refers to the same physical device as this instance.</summary>
            <param name="OtherDevice">The <see cref="T:RgbDriverKit.Device"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:RgbDriverKit.Device"/> refers to the same physical device; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="OtherDevice"/> parameter is null.</exception>
            <remarks>This implementation compares the device paths of both objects (if both are instances of <see cref="T:RgbDriverKit.Qseries"/>).</remarks>
        </member>
        <member name="M:RgbDriverKit.Qseries.Open">
            <summary>Opens the connection to the device.</summary>
            <exception cref="T:RgbDriverKit.DeviceNotFoundException">The device specified by the constructor parameters cannot be found.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device is not supported by this class.</exception>
        </member>
        <member name="M:RgbDriverKit.Qseries.Reset">
            <exclude/>
            <summary>Resets the spectrometer and the communication channel.</summary>
            <remarks>Do not use this method. It may be removed in the future.</remarks>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="M:RgbDriverKit.Qseries.Close">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.Qseries.CheckDeviceRemoved">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.Qseries.OpenForDebug">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Qseries.StartBootloader(System.Int32)">
            <exclude/>
            <summary>Resets the device and enters the bootloader for updating the firmware.</summary>
            <exception cref="T:System.InvalidOperationException">Spectrometer is not idle</exception>
            <remarks>The spectrometer connection is closed after the reset. You'll have to wait for the device to appear again and then open the connection to the bootloader.</remarks>
        </member>
        <member name="M:RgbDriverKit.Qseries.DeviceReset">
            <exclude/>
            <summary>Resets the device to the power-on state.</summary>
            <exception cref="T:System.InvalidOperationException">Spectrometer is not idle</exception>
            <remarks>The spectrometer connection is closed after the reset. You'll have to wait for the device to appear again and call <see cref="M:RgbDriverKit.Qseries.Open"/> afterwards.</remarks>
        </member>
        <member name="M:RgbDriverKit.Qseries.ParameterReset">
            <exclude/>
            <summary>Resets all user-changeable device parameters to their default values.</summary>
            <exception cref="T:System.InvalidOperationException">Spectrometer is not idle</exception>
            <remarks>The spectrometer connection is closed after the parameters are reset.</remarks> 
        </member>
        <member name="M:RgbDriverKit.Qseries.TestCalibrationMemory">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Qseries.GetDeviceSettings">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Qseries.StartExposure">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.Qseries.StartExposure(System.Int32)">
            <summary>Starts the exposure.</summary>
            <param name="NumExposures">The number of exposures OR <c>-1</c> for continuous exposure (keeping only the most recent spectrum)
            OR <c>-2</c> for continuous exposure (keeping all spectra, unless FIFO buffer overflows).</param>
            <remarks><para>This method also discards any spectrum that is available but hasn't been read out yet.</para>
            <para>The values <c>-1</c> and <c>-2</c> may not be fully implemented yet in all devices.</para></remarks>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.ArgumentException">Invalid NumExposures value.</exception>
        </member>
        <member name="M:RgbDriverKit.Qseries.CancelExposure">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.Qseries.GetSpectrumData">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.Qseries.LoadUserCalibration">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.Qseries.RestoreFactoryCalibration">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Cannot restore factory calibration.</exception>
        </member>
        <member name="M:RgbDriverKit.Qseries.SaveUserCalibration">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed or not idle.</exception>
            <exception cref="T:RgbDriverKit.DeviceMemoryFullException">Calibration data is too large for device memory.</exception>
        </member>
        <member name="M:RgbDriverKit.Qseries.SaveFactoryCalibration">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Qseries.LoadUserData">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.Qseries.SaveUserData(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.Qseries.SetIOPinConfiguration(System.Int32,RgbDriverKit.SpectrometerIOConfiguration)">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="M:RgbDriverKit.Qseries.GetIOPinConfiguration(System.Int32)">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="M:RgbDriverKit.Qseries.WriteIntegers(System.Int32,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Qseries.WriteInteger(System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Qseries.ReadInteger(System.Int32)">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Qseries.ReadString(System.Int32)">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qseries.BaudRate">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qseries.DevicePath">
            <summary>Gets the USB device path for this spectrometer.</summary>
            <remarks>This may be used to create an instance of this class for a specific device. The bootloader also needs this in order to reopen then device.</remarks>
        </member>
        <member name="P:RgbDriverKit.Qseries.DebugWatch">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qseries.HardwareVersion">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.Qseries.SoftwareVersion">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.Qseries.ModelID">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.Qseries.ProcessingSteps">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.Qseries.DoNotProcessInDevice">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qseries.ExposureTime">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The new value is too large or too small.</exception>
        </member>
        <member name="P:RgbDriverKit.Qseries.Averaging">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.Qseries.SensorGain">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.Qseries.AvailableSpectra">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.Qseries.Status">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.Qseries.CanReadTemperature">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.Qseries.Temperature">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.Qseries.ActualTemperature">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qseries.TemperatureControlAvailable">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qseries.TargetTemperature">
            <exclude/>
        </member>
        <member name="E:RgbDriverKit.Qseries.TargetTemperatureChanged">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qseries.MinTemperature">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qseries.MaxTemperature">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qseries.DefaultTemperature">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qseries.TargetTemperatureReached">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qseries.TemperatureControlEnabled">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qseries.TecStatus">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qseries.TecCurrent">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qseries.SinkTemperature">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qseries.SinkTemperatureLimit">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qseries.CanReadSampleTemperature">
            <summary>Gets a value indicating whether this device can measure the temperature of the sample.</summary>
            <value><c>true</c> if the sample temperature can be read; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RgbDriverKit.Qseries.SampleTemperature">
            <summary>Gets the temperature of the sample.</summary>
            <value>The sample temperature in °C.</value>
            <exception cref="T:System.NotSupportedException">This device does not have a sample temperature sensor.</exception>
        </member>
        <member name="P:RgbDriverKit.Qseries.IOPins">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="P:RgbDriverKit.Qseries.ExternalTriggerSource">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The pin number is too large or too small.</exception>
        </member>
        <member name="P:RgbDriverKit.Qseries.TriggerOption">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.Qseries.ExternalTriggerRisingEdge">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="P:RgbDriverKit.Qseries.UseExternalTrigger">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="P:RgbDriverKit.Qseries.CanUseExternalTrigger">
            <inheritdoc />
        </member>
        <member name="T:RgbDriverKit.Qstick">
            <summary>Device class for controlling Qstick spectrometers.</summary>
            <remarks>Communicates with the device via WinUSB.</remarks>
        </member>
        <member name="T:RgbDriverKit.ThreadedCalibratedSpectrometer">
            <summary>A calibrated spectrometer using a separate thread to poll the spectrometer.</summary>
            <remarks><para>Descendants of this base class use a background thread to poll the spectrometer.</para>
            <para>This thread is typically used to perform averaging across multiple spectra in the background and to
            raise the <see cref="E:RgbDriverKit.ThreadedCalibratedSpectrometer.ExposureFinished"/> event. It may also be required to prevent blocking of the main
            application when using some third-party spectrometers that are stupid enough to block the communication channel
            during exposure.</para>
            <para>This class also implements a FIFO buffer for spectra. This allows you to take multiple spectra and read
            them out later.</para></remarks>
        </member>
        <member name="M:RgbDriverKit.ThreadedCalibratedSpectrometer.Open">
            <inheritdoc/>
        </member>
        <member name="M:RgbDriverKit.ThreadedCalibratedSpectrometer.Close">
            <inheritdoc/>
        </member>
        <member name="M:RgbDriverKit.ThreadedCalibratedSpectrometer.OnExposureFinished(System.Object)">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.ThreadedCalibratedSpectrometer.StartExposure">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="M:RgbDriverKit.ThreadedCalibratedSpectrometer.StartExposure(System.Int32)">
            <summary>Starts the exposure.</summary>
            <param name="NumExposures">The number of exposures OR <c>-1</c> for continuous exposure (keeping only the most recent spectrum)
            OR <c>-2</c> for continuous exposure (keeping all spectra, unless FIFO buffer overflows).</param>
            <remarks><para>This method also discards any spectrum that is available but hasn't been read out yet.</para>
            <para>The values <c>-1</c> and <c>-2</c> may not be fully implemented yet in all device classes.</para></remarks>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.ArgumentException">Invalid NumExposures value.</exception>
        </member>
        <member name="M:RgbDriverKit.ThreadedCalibratedSpectrometer.CancelExposure">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
        </member>
        <member name="M:RgbDriverKit.ThreadedCalibratedSpectrometer.SetStatus(RgbDriverKit.SpectrometerStatus)">
            <exception cref="T:System.InvalidOperationException">Exposure thread is already closed.</exception>
        </member>
        <member name="M:RgbDriverKit.ThreadedCalibratedSpectrometer.GetSpectrumData">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">An error occurred while reading data from the device.</exception>
        </member>
        <member name="P:RgbDriverKit.ThreadedCalibratedSpectrometer.ExposureThreadPriority">
            <summary>This is only for testing and probably going to be removed later.</summary>
            <exclude/>
        </member>
        <member name="E:RgbDriverKit.ThreadedCalibratedSpectrometer.ExposureFinished">
            <summary>Occurs when a new spectrum has become available.</summary>
            <remarks><para>For single exposures, this occurs when the <see cref="P:RgbDriverKit.Spectrometer.Status"/> value changes
            from to <see cref="F:RgbDriverKit.SpectrometerStatus.TakingSpectrum"/> to <see cref="F:RgbDriverKit.SpectrometerStatus.Idle"/>
            or <see cref="F:RgbDriverKit.SpectrometerStatus.Error"/>.</para>
            <para>It also occurs when the exposure is interrupted due to an error. In this case an empty instance of the
            <see cref="T:RgbDriverKit.SpectrumData"/> class is returned, the <see cref="P:RgbDriverKit.ThreadedCalibratedSpectrometer.Status"/> is <see cref="F:RgbDriverKit.SpectrometerStatus.Error"/>
            and you should call <see cref="M:RgbDriverKit.Spectrometer.GetSpectrum"/> or <see cref="M:RgbDriverKit.CalibratedSpectrometer.GetSpectrumData"/>,
            in order to have a suitable exception being thrown.</para>
            <para>This event is called in the context of the main thread, if you called the <see cref="M:RgbDriverKit.ThreadedCalibratedSpectrometer.Open"/> method from the main UI thread.
            Otherwise, this event is called in the context of the internal thread of this class.</para></remarks>
        </member>
        <member name="P:RgbDriverKit.ThreadedCalibratedSpectrometer.Status">
            <inheritdoc/>
        </member>
        <member name="P:RgbDriverKit.ThreadedCalibratedSpectrometer.RemainingExposures">
            <summary>Gets the number of remaining exposures (after the one that is currently in progress).</summary>
            <value>The remaining exposures.</value>
            <remarks>This property may not be public anymore in a later version.</remarks>
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.ThreadedCalibratedSpectrometer.AvailableSpectra">
            <inheritdoc/>
        </member>
        <member name="F:RgbDriverKit.Qstick.InterfaceClassGuid">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Qstick.SearchDevices">
            <summary>Searches for spectrometers of this kind.</summary>
            <returns>An array with <see cref="T:RgbDriverKit.Qstick"/> objects, one for each spectrometer that was found.</returns>
            <remarks>
            <para>The returned spectrometer objects have the serial number and model name set properly.</para>
            <para>The idea is that you call this method at program start and then let the user choose one of the returned device objects
            (if several devices are connected). Afterwards, you can start using the selected device by calling the <see cref="M:RgbDriverKit.Qstick.Open"/> method.</para>
            </remarks>
        </member>
        <member name="M:RgbDriverKit.Qstick.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.Qstick"/> class.</summary>
            <param name="DevicePath">The DevicePath as returned from the WinUSB function <c>SetupDiGetDeviceInterfaceDetail</c>.</param>
            <remarks>You can use this constructor to access a spectrometer with a given device path.
            If you want to let the user choose which device to use, don't use this constructor and use <see cref="M:RgbDriverKit.Qstick.SearchDevices"/> instead.</remarks>
        </member>
        <member name="M:RgbDriverKit.Qstick.IsSameDeviceAs(RgbDriverKit.Device)">
            <inheritdoc/>
            <remarks>This implementation compares the serial numbers of both objects (if both are instances of <see cref="T:RgbDriverKit.Qstick"/>).</remarks>
        </member>
        <member name="M:RgbDriverKit.Qstick.Open">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceNotFoundException">The device specified by the constructor parameters cannot be found.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device is not supported by this class.</exception>
        </member>
        <member name="M:RgbDriverKit.Qstick.Reset">
            <exclude/>
            <summary>Resets the spectrometer and the communication channel.</summary>
            <remarks>Do not use this method. It may be removed in the future.</remarks>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="M:RgbDriverKit.Qstick.Close">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.Qstick.CheckDeviceRemoved">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.Qstick.OpenForDebug">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Qstick.StartBootloader(System.Int32)">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Qstick.DeviceReset">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Qstick.GetDeviceSettings">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Qstick.GetSpectrumData">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.Qstick.LoadUserCalibration">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.Qstick.RestoreFactoryCalibration">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Cannot restore factory calibration.</exception>
        </member>
        <member name="M:RgbDriverKit.Qstick.LoadCalibration(System.Int32)">
            <exception cref="T:System.ArgumentException">Invalid calibration data format version.</exception>
        </member>
        <member name="M:RgbDriverKit.Qstick.SaveUserCalibration">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed or not idle.</exception>
            <exception cref="T:RgbDriverKit.DeviceMemoryFullException">Calibration data is too large for device memory.</exception>
        </member>
        <member name="M:RgbDriverKit.Qstick.SaveFactoryCalibration">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Qstick.LoadUserData">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Spectrometer is not idle.</exception>
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
        </member>
        <member name="M:RgbDriverKit.Qstick.SaveUserData(System.Byte[])">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Spectrometer is not idle.</exception>
            <exception cref="T:System.InvalidOperationException">User data cannot be saved if no calibration data is available.</exception>
            <exception cref="T:System.InvalidOperationException">Calibration data version is not supported for user data.</exception>
        </member>
        <member name="M:RgbDriverKit.Qstick.ReadSettings(System.Int32)">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Qstick.WriteSettings(System.Int32,System.UInt32[])">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.Qstick.SetIOPinConfiguration(System.Int32,RgbDriverKit.SpectrometerIOConfiguration)">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="M:RgbDriverKit.Qstick.GetIOPinConfiguration(System.Int32)">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.Qstick.DevicePath">
            <summary>Gets the USB device path for this spectrometer.</summary>
            <remarks>This may be used to create an instance of this class for a specific device. The bootloader also needs this in order to reopen then device.</remarks>
        </member>
        <member name="P:RgbDriverKit.Qstick.DebugValue">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qstick.HardwareVersion">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.Qstick.SoftwareVersion">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.Qstick.ModelID">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.Qstick.CanReadTemperature">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.Qstick.Temperature">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.Qstick.ProcessingSteps">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.Qstick.DoNotProcessInDevice">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.Qstick.CanReadSampleTemperature">
            <summary>Gets a value indicating whether this device can measure the temperature of the sample.</summary>
            <value><c>true</c> if the sample temperature can be read; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RgbDriverKit.Qstick.SampleTemperature">
            <summary>Gets the temperature of the sample.</summary>
            <value>The sample temperature in °C.</value>
            <exception cref="T:System.NotSupportedException">This device does not have a sample temperature sensor.</exception>
        </member>
        <member name="P:RgbDriverKit.Qstick.ExposureTime">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The new value is too large or too small.</exception>
        </member>
        <member name="P:RgbDriverKit.Qstick.Averaging">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.Qstick.IOPins">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.Qstick.TriggerOption">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="T:RgbDriverKit.RgbSpectrometer">
            <summary>Device class for controlling Qwave and Qmini spectrometers.</summary>
            <remarks>Communicates with the FTDI device via WinUSB.</remarks>
        </member>
        <member name="F:RgbDriverKit.RgbSpectrometer.InterfaceClassGuid">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.SearchDevices">
            <summary>Searches for spectrometers of this kind.</summary>
            <returns>An array with <see cref="T:RgbDriverKit.RgbSpectrometer"/> objects, one for each spectrometer that was found.</returns>
            <remarks>
            <para>The returned spectrometer objects have the serial number and model name set properly.</para>
            <para>The idea is that you call this method at program start and then let the user choose one of the returned device objects
            (if several devices are connected). Afterwards, you can start using the selected device by calling the <see cref="M:RgbDriverKit.RgbSpectrometer.Open"/> method.</para>
            </remarks>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.SearchDevices(System.Boolean)">
            <summary>Searches for spectrometers of this kind.</summary>
            <param name="ActiveScan">If set to <c>false</c>, the search also includes serial ports that may have a spectrometer with UART interface connected to them.</param>
            <returns>An array with <see cref="T:RgbDriverKit.RgbSpectrometer"/> objects, one for each spectrometer that was found.</returns>
            <remarks>
            <para>The returned spectrometer objects have the serial number and model name set properly.</para>
            <para>The idea is that you call this method at program start and then let the user choose one of the returned device objects
            (if several devices are connected). Afterwards, you can start using the selected device by calling the <see cref="M:RgbDriverKit.RgbSpectrometer.Open"/> method.</para>
            <para>In most cases, the parameter should be set to <c>true</c>, unless you are using spectrometers with UART interface.</para>
            </remarks>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.RgbSpectrometer"/> class.</summary>
            <param name="DevicePath">The USB device path (or serial port name if the device is connected via serial port).</param>
            <remarks>You can use this constructor to access a spectrometer with a given USB device path.
            If you want to let the user choose which device to use, don't use this constructor and use <see cref="M:RgbDriverKit.RgbSpectrometer.SearchDevices"/> instead.</remarks>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.IsSameDeviceAs(RgbDriverKit.Device)">
            <inheritdoc/>
            <remarks>This implementation compares the device paths of both objects (if both are instances of <see cref="T:RgbDriverKit.RgbSpectrometer"/>).</remarks>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.Open">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceNotFoundException">The device specified by the constructor parameters cannot be found.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The USB bus cannot supply enough power.</exception>
            <exception cref="T:System.InvalidOperationException">The device is not supported by this class.</exception>
            <exception cref="T:RgbDriverKit.InvalidFirmwareException">The device firmware version is too old.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.Reset">
            <exclude/>
            <summary>Resets the spectrometer and the communication channel.</summary>
            <remarks>Do not use this method. It may be removed in the future.</remarks>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.Close">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.CheckDeviceRemoved">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.BlockCommunication(System.Int32)">
            <summary>This is only for testing and will be removed later.</summary>
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.OpenForDebug">
            <exclude/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.StartIspBootloader(System.Int32)">
            <exclude/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The spectrometer is not idle.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.DeviceReset">
            <exclude/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.ParameterReset">
            <exclude/>
            <summary>Resets all user-changeable device parameters to their default values.</summary>
            <exception cref="T:System.InvalidOperationException">Spectrometer is not idle</exception>
            <remarks>The spectrometer connection is closed after the parameters are reset.</remarks> 
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.GetDeviceSettings">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.CheckTemperature(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.SetPixelCount(System.Int32)">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.StartExposure">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Trigger pin is not configured as input.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.LoadUserCalibration">
            <inheritdoc/>
            <exception cref="T:System.ArgumentException">Invalid calibration data format version.</exception>
            <exception cref="T:System.InvalidOperationException">Spectrometer is not idle.</exception>
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.RestoreFactoryCalibration">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Cannot restore factory calibration.</exception>
            <exception cref="T:System.ArgumentException">Invalid calibration data format version.</exception>
            <exception cref="T:System.InvalidOperationException">Spectrometer is not idle.</exception>
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.LoadCalibration(System.Int32)">
            <exception cref="T:System.ArgumentException">Invalid calibration data format version.</exception>
            <exception cref="T:System.InvalidOperationException">Spectrometer is not idle.</exception>
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.ReadCalibrPages(System.Int32)">
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.SaveUserCalibration">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed or the spectrometer is not idle.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
            <exception cref="T:RgbDriverKit.DeviceMemoryFullException">Calibration data is too large for device memory.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.SaveFactoryCalibration">
            <exclude/>
            <exception cref="T:RgbDriverKit.DeviceMemoryFullException">Calibration data is too large for device memory.</exception>
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.SaveCalibration(System.Int32)">
            <exception cref="T:RgbDriverKit.DeviceMemoryFullException">Calibration data is too large for device memory.</exception>
            <exception cref="T:System.InvalidOperationException">Device connection is closed or the spectrometer is not idle.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.WriteCalibrPages(System.Byte[],System.Int32)">
            <exception cref="T:RgbDriverKit.DeviceMemoryFullException">Calibration data is too large for device memory.</exception>
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.WriteCalibrPage(System.Int32,System.Byte[])">
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.LoadUserData">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Spectrometer is not idle.</exception>
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.SaveUserData(System.Byte[])">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Spectrometer is not idle.</exception>
            <exception cref="T:System.InvalidOperationException">User data cannot be saved if no calibration data is available.</exception>
            <exception cref="T:System.InvalidOperationException">Calibration data version is not supported for user data.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.InitializePort">
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.SetIOPinConfiguration(System.Int32,RgbDriverKit.SpectrometerIOConfiguration)">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.GetIOPinConfiguration(System.Int32)">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.SendTriggerMode">
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.AuxInterfaceSearch(System.UInt32)">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.WriteCommand(System.String)">
            <exclude/>
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.WriteInteger(System.String,System.Int32)">
            <exclude/>
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.ReadInteger(System.String)">
            <exclude/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">Device reply is not a number.</exception>
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.ReadString(System.String)">
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.WriteData(System.String,System.Int32,System.Byte[])">
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.ReadData(System.String,System.Int32,System.Byte[])">
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.ReadData(System.String,System.Byte[])">
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
        </member>
        <member name="M:RgbDriverKit.RgbSpectrometer.ReadResult(System.String)">
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.DevicePath">
            <summary>Gets the USB device path for this spectrometer.</summary>
            <remarks>This may be used to create an instance of this class for a specific device. The bootloader also needs this in order to reopen then device.
            If the device is connected via serial port, this property contains the same string as the <see cref="P:RgbDriverKit.Device.PortName"/> property.</remarks>
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.HardwareVersion">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.SoftwareVersion">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.ModelID">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.CanReadTemperature">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.Temperature">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.ProcessingSteps">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.ExposureTime">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The new value is too large or too small.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.RemainingExposures">
            <exclude/>
            <exception cref="T:System.InvalidOperationException">Device connection is closed.</exception>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.IOPins">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.ExternalTriggerSource">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The pin number is too large or too small.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.TriggerOption">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.ExternalTriggerRisingEdge">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.UseExternalTrigger">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
            <exception cref="T:System.InvalidOperationException">The device returned an error code.</exception>
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.CanUseExternalTrigger">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.AuxInterfaceType">
            <inheritdoc />
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.AuxInterface">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.RgbSpectrometer.AuxInterfaceClockFrequency">
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.RgbSpectrometer.auxInterfaceClass">
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.SerialPortInterface">
            <summary>A communication interface using an RS-232-type serial port.</summary>
            <remarks>This is a wrapper for the SerialPort class provided by the .NET framework.</remarks>
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.SerialPortInterface.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.SerialPortInterface"/> class.</summary>
            <param name="PortName">The name of the serial port.</param>
        </member>
        <member name="M:RgbDriverKit.SerialPortInterface.Open">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.SerialPortInterface.Close">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.SerialPortInterface.Read(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.SerialPortInterface.Write(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.SerialPortInterface.Purge">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.SerialPortInterface.ReadByte">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.SerialPortInterface.ReadLine">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.SerialPortInterface.Write(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.SerialPortInterface.WriteLine(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.SerialPortInterface.GetAvailableSerialPorts">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.SerialPortInterface.GetPortDescriptions">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.SerialPortInterface.BaudRate">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.SerialPortInterface.IsOpen">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SerialPortInterface.Timeout">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SerialPortInterface.BytesToRead">
            <inheritdoc />
        </member>
        <member name="T:RgbDriverKit.SimulatedLaser">
            <summary>Device class for a simulated laser.</summary>
            <remarks>This class simulates the existance of a real laser. It can be used for testing and evaluation if no real device is connected.</remarks>
        </member>
        <member name="M:RgbDriverKit.SimulatedLaser.SearchDevices">
            <summary>Searches for lasers of this kind.</summary>
            <returns>An array with one <see cref="T:RgbDriverKit.SimulatedLaser"/> object.</returns>
        </member>
        <member name="M:RgbDriverKit.SimulatedLaser.#ctor">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.SimulatedLaser"/> class.</summary>
        </member>
        <member name="M:RgbDriverKit.SimulatedLaser.Open">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.SimulatedLaser.Close">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.SimulatedLaser.CheckDeviceRemoved">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedLaser.Enabled">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedLaser.Type">
            <inheritdoc/>
            <value>Always returns the type <see cref="F:RgbDriverKit.LightSourceType.Laser"/>.</value>
        </member>
        <member name="P:RgbDriverKit.SimulatedLaser.TotalOperatingTime">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedLaser.Status">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedLaser.OutputPower">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedLaser.ModulationMode">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedLaser.ActualTemperature">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedLaser.TargetTemperature">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedLaser.MinTemperature">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedLaser.MaxTemperature">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedLaser.DefaultTemperature">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedLaser.TemperatureControlAvailable">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedLaser.TemperatureControlEnabled">
            <exclude/>
        </member>
        <member name="E:RgbDriverKit.SimulatedLaser.TargetTemperatureChanged">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedLaser.TargetTemperatureReached">
            <inheritdoc />
        </member>
        <member name="T:RgbDriverKit.SimulatedSpectrometer">
            <summary>Device class for a simulated spectrometer.</summary>
            <remarks>This class simulates the existance of a real spectrometer. It can be used for testing and evaluation if no real device is connected.</remarks>
        </member>
        <member name="M:RgbDriverKit.SimulatedSpectrometer.SearchDevices">
            <summary>Searches for spectrometers of this kind.</summary>
            <returns>An array with one <see cref="T:RgbDriverKit.SimulatedSpectrometer"/> object.</returns>
        </member>
        <member name="M:RgbDriverKit.SimulatedSpectrometer.#ctor">
            <summary>Initializes a new instance of this class.</summary>
        </member>
        <member name="M:RgbDriverKit.SimulatedSpectrometer.IsSameDeviceAs(RgbDriverKit.Device)">
            <summary>Determines whether the specified <see cref="T:RgbDriverKit.Device"/> refers to the same device as this instance.</summary>
            <param name="OtherDevice">The <see cref="T:RgbDriverKit.Device"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:RgbDriverKit.Device"/> refers to the same physical device; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:RgbDriverKit.SimulatedSpectrometer.Open">
            <summary>Opens the connection to the device.</summary>
        </member>
        <member name="M:RgbDriverKit.SimulatedSpectrometer.RestoreFactoryCalibration">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.SimulatedSpectrometer.Close">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.SimulatedSpectrometer.CheckDeviceRemoved">
            <inheritdoc />
        </member>
        <member name="M:RgbDriverKit.SimulatedSpectrometer.SetIOPinConfiguration(System.Int32,RgbDriverKit.SpectrometerIOConfiguration)">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="M:RgbDriverKit.SimulatedSpectrometer.GetIOPinConfiguration(System.Int32)">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="P:RgbDriverKit.SimulatedSpectrometer.DetailedDeviceName">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedSpectrometer.HardwareVersion">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedSpectrometer.SoftwareVersion">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedSpectrometer.ModelID">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedSpectrometer.CanReadTemperature">
            <inheritdoc />
        </member>
        <member name="P:RgbDriverKit.SimulatedSpectrometer.Temperature">
            <summary>Gets the internal device temperature.</summary>
            <value>The internal device temperature in °C.</value>
            <remarks>The simulated spectrometer returns a random temperature value around 25 °C.</remarks>
        </member>
        <member name="P:RgbDriverKit.SimulatedSpectrometer.ExposureTime">
            <inheritdoc/>
            <exception cref="T:System.ArgumentOutOfRangeException">The new value is too large or too small.</exception>
        </member>
        <member name="P:RgbDriverKit.SimulatedSpectrometer.LightIntensity">
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.SimulatedSpectrometer.IOPins">
            <inheritdoc/>
            <exception cref="T:RgbDriverKit.DeviceCommunicationException">The answer from the device is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">The device connection is closed.</exception>
        </member>
        <member name="T:RgbDriverKit.SpectrometerStatus">
            <summary>An enumeration of the values returned by the Status property of a spectrometer class.</summary>
            <remarks>
            <para>The value WaitingForTrigger may only occur if this device is an <see cref="T:RgbDriverKit.CalibratedSpectrometer"/> and <see cref="P:RgbDriverKit.Spectrometer.UseExternalTrigger"/> is set to <c>true</c>.</para>
            <para>If you want to wait for an exposure to be finished, use something like this: <c>while (spectromter.Status &gt; SpectrometerStatus.Idle) Sleep(50);</c></para>
            </remarks>
        </member>
        <member name="F:RgbDriverKit.SpectrometerStatus.Idle">
            <summary>The spectrometer is idle and ready to take a spectrum.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerStatus.WaitingForTrigger">
            <summary><see cref="M:RgbDriverKit.Spectrometer.StartExposure"/> was called and now the spectrometer is waiting for a trigger signal.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerStatus.TakingSpectrum">
            <summary>The spectrometer is taking a spectrum.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerStatus.WaitingForTemperature">
            <summary>The spectrometer is waiting to reach the target temperature. (Reserved for future use.)</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerStatus.NotReady">
            <summary>The spectrometer is currently in a state in which it cannot take spectra. (Reserved for future use.)</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerStatus.Busy">
            <summary>The spectrometer is currently busy doing something and therefore not ready to take a spectrum. (Reserved for future use.)</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerStatus.Error">
            <summary>An error occurred while waiting for the exposure to be finished. (Currently only used internally.)</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerStatus.Closed">
            <summary>The connection to the device is closed.</summary>
        </member>
        <member name="T:RgbDriverKit.SpectrometerTriggerOptions">
            <summary>An enumeration representing the different trigger options for a spectrometer.</summary>
            <remarks>Please see the user manual for more information on the different trigger modes and options. Not all spectrometers support all trigger modes or options.</remarks>
        </member>
        <member name="F:RgbDriverKit.SpectrometerTriggerOptions.FreeRunningTriggerEnd">
            <summary>Spectra are taken continuously (free-running) and the trigger event triggers reading out the spectrum that is currently being taken. </summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerTriggerOptions.FreeRunningTriggerStart">
            <summary>Spectra are taken continuously (free-running) and the trigger event triggers reading out the spectrum that is taken after the current one. </summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerTriggerOptions.HardwareTriggered">
            <summary>The trigger event starts a new exposure period.</summary>
        </member>
        <member name="T:RgbDriverKit.SpectrometerIOConfiguration">
            <summary>An enumeration of the spectrometer I/O configuration values.</summary>
            <remarks>OutputDuringExpLow and OutputDuringExpHigh can not be used if the <see cref="P:RgbDriverKit.Spectrometer.TriggerOption"/>
            is <see cref="F:RgbDriverKit.SpectrometerTriggerOptions.FreeRunningTriggerEnd"/>.</remarks>
        </member>
        <member name="F:RgbDriverKit.SpectrometerIOConfiguration.OutputConstantLow">
            <summary>The I/O pin is constant at <c>low</c> level.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerIOConfiguration.OutputConstantHigh">
            <summary>The I/O pin is constant at <c>high</c> level.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerIOConfiguration.OutputDuringExpLow">
            <summary>The I/O pin is at <c>low</c> level during the exposure, otherwise <c>high</c>.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerIOConfiguration.OutputDuringExpHigh">
            <summary>The I/O pin is at <c>high</c> level during the exposure, otherwise <c>low</c>.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerIOConfiguration.Input">
            <summary>The I/O pin is used as an input (custom input or trigger source).</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerIOConfiguration.OutputPulsed">
            <summary>The I/O pin is pulsed high and low to control an external xenon flash light.
            (Support for this feature is experimental and may be changed later on.)</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerIOConfiguration.OutputDuringExpPulsedLow">
            <summary>The I/O pin is pulsed during the exposure, otherwise high.
            Starts with negative edge at beginning of exposure.</summary>
        </member>
        <member name="F:RgbDriverKit.SpectrometerIOConfiguration.OutputDuringExpPulsedHigh">
            <summary>The I/O pin is pulsed during the exposure, otherwise low.
            Starts with positive edge at beginning of exposure.</summary>
        </member>
        <member name="T:RgbDriverKit.ExposureFinishedEventHandler">
            <summary>A delegate that represents the method that will handle the <see cref="E:RgbDriverKit.ThreadedCalibratedSpectrometer.ExposureFinished"/> event.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:RgbDriverKit.ExposureFinishedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:RgbDriverKit.ExposureFinishedEventArgs">
            <summary>Provides data for the <see cref="E:RgbDriverKit.ThreadedCalibratedSpectrometer.ExposureFinished"/> event.</summary>
        </member>
        <member name="M:RgbDriverKit.ExposureFinishedEventArgs.#ctor(RgbDriverKit.SpectrumData,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.ExposureFinishedEventArgs"/> class.</summary>
            <param name="SpectrumData">An instance of the <see cref="P:RgbDriverKit.ExposureFinishedEventArgs.SpectrumData"/> class.</param>
            <param name="SpectrumDropped">If set to <c>true</c>, at least one spectrum was dropped due to a spectrum buffer overflow.</param>
        </member>
        <member name="P:RgbDriverKit.ExposureFinishedEventArgs.SpectrumData">
            <summary>Gets the spectrum including some metadata.</summary>
            <value>An instance of the <see cref="P:RgbDriverKit.ExposureFinishedEventArgs.SpectrumData"/> class that contains the data.</value>
        </member>
        <member name="P:RgbDriverKit.ExposureFinishedEventArgs.SpectrumDropped">
            <summary>Gets a value indicating whether a spectrum was dropped due to a spectrum buffer overflow.</summary>
            <value><c>true</c>, if at least one spectrum was dropped, otherwise <c>false</c>.</value>
        </member>
        <member name="T:RgbDriverKit.UsbtmcInterface">
            <summary>A communication interface for controlling a device using the USBTMC protocol.</summary>
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.UsbInterface">
            <summary>A communication interface using USB.</summary>
            <remarks>Descendants of this class may implement specific USB device classes (like HID or USBTMC) or communicate via generic drivers like WinUSB.</remarks>
            <exclude/>
        </member>
        <member name="P:RgbDriverKit.UsbInterface.PacketSize">
            <summary>Gets the size of a packet.</summary>
            <value>The size of a packet.</value>
        </member>
        <member name="P:RgbDriverKit.UsbInterface.Manufacturer">
            <summary>Gets the device manufacturer name from the USB device descriptor.</summary>
            <remarks>May be empty.</remarks>
        </member>
        <member name="P:RgbDriverKit.UsbInterface.Product">
            <summary>Gets the device product name from the USB device descriptor.</summary>
            <remarks>May be empty.</remarks>
        </member>
        <member name="P:RgbDriverKit.UsbInterface.SerialNumber">
            <summary>Gets the serial number from the USB device descriptor.</summary>
            <remarks>May be empty.</remarks>
        </member>
        <member name="M:RgbDriverKit.UsbtmcInterface.GetUsbDevicePaths(System.String)">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.UsbtmcInterface.#ctor(System.String)">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.UsbtmcInterface.Open">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.UsbtmcInterface.Write(System.Byte[],System.Int32)">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.UsbtmcInterface.Read(System.Byte[],System.Int32)">
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.UsbtmcInterface.Purge">
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.Win32Error">
            <exclude/>
        </member>
        <member name="T:RgbDriverKit.Win32">
            <exclude/>
        </member>
        <member name="F:RgbDriverKit.Win32.DriveType.Unknown">
            <summary>The drive type cannot be determined.</summary>
        </member>
        <member name="F:RgbDriverKit.Win32.DriveType.Error">
            <summary>The root path is invalid, for example, no volume is mounted at the path.</summary>
        </member>
        <member name="F:RgbDriverKit.Win32.DriveType.Removable">
            <summary>The drive is a type that has removable media, for example, a floppy drive or removable hard disk.</summary>
        </member>
        <member name="F:RgbDriverKit.Win32.DriveType.Fixed">
            <summary>The drive is a type that cannot be removed, for example, a fixed hard drive.</summary>
        </member>
        <member name="F:RgbDriverKit.Win32.DriveType.Remote">
            <summary>The drive is a remote (network) drive.</summary>
        </member>
        <member name="F:RgbDriverKit.Win32.DriveType.CDROM">
            <summary>The drive is a CD-ROM drive.</summary>
        </member>
        <member name="F:RgbDriverKit.Win32.DriveType.RAMDisk">
            <summary>The drive is a RAM disk.</summary>
        </member>
        <member name="T:RgbDriverKit.WinUsbInterface">
            <summary>An interface to communicate with a USB device using the WinUSB driver.</summary>
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.WinUsbInterface.GetUsbDevicePaths(System.String,System.Guid)">
            <summary>Searches for attached devices with the given device ID and returns a list of all devices found.</summary>
            <param name="DeviceID">A string containing the USB device ID including vendor ID and product ID (<c>null</c> means any device ID).</param>
            <param name="InterfaceClassGuid">The interface class GUID. This GUID needs to match the GUID that is used in the .INF file used to install the WinUSB driver.</param>
            <returns>A string array containing the device path for each device. This can be used to instantiate a <see cref="T:RgbDriverKit.WinUsbInterface"/>.</returns>
        </member>
        <member name="M:RgbDriverKit.WinUsbInterface.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.WinUsbInterface"/> class.</summary>
            <param name="DevicePath">The USB device path.</param>
            <remarks>This constructor does not throw exceptions. If the Manufacturer, Product and SerialNumber properties cannot be read out from the device, 
            they remain empty strings. This happens especially if the device connection is already open.</remarks>
        </member>
        <member name="M:RgbDriverKit.WinUsbInterface.GetStringDescriptor(System.Byte)">
            <summary>Get a USB string descriptor. </summary>
            <param name="index">The string descriptor index.</param>
            <returns>The string.</returns>
            <remarks>If the string descriptor is not available, a question mark is returned. This may also happen if the device is not fully enumerated yet.</remarks>
        </member>
        <member name="T:RgbDriverKit.HidInterface">
            <summary>An interface to communicate with a USB device using the HID driver.</summary>
            <exclude/>
        </member>
        <member name="M:RgbDriverKit.HidInterface.GetUsbDevicePaths(System.String)">
            <summary>Searches for attached devices with the given device ID and returns a list of all devices found.</summary>
            <param name="DeviceID">A string containing the USB device ID including vendor ID and product ID (<c>null</c> means any device ID).</param>
            <returns>A string array containing the device path for each device. This can be used to instantiate a <see cref="T:RgbDriverKit.HidInterface"/>.</returns>
        </member>
        <member name="M:RgbDriverKit.HidInterface.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:RgbDriverKit.HidInterface"/> class.</summary>
            <param name="DevicePath">The USB device path.</param>
            <remarks>This constructor does not throw exceptions. If the Manufacturer, Product and SerialNumber properties cannot be read out from the device, 
            they remain empty strings. This happens especially if the device connection is already open.</remarks>
        </member>
        <member name="T:RgbDriverKit.OOUsbInterface">
            <summary>An interface to communicate with Ocean Optics spectrometers using the WinUSB driver.</summary>
            <exclude/>
        </member>
    </members>
</doc>
